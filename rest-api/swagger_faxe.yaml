swagger: "2.0"
info:
  title: faxe REST API
  description: API description in Markdown.
  version: 1.0.0
schemes:
  - http
  - https
basePath: /v1
host: example.com:8081
paths:
  /stats/vm:
    get:
      summary: Erlang VM stats
      description: Returns statistics about the erlang VM faxe is running on.
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
                "vmstats-vm_uptime": 3743605,
                "vmstats-run_queue": 1,
                "vmstats-reductions": 39523,
                "vmstats-proc_limit": 262144,
                "vmstats-proc_count": 182,
                "vmstats-port_limit": 65536,
                "vmstats-port_count": 9,
                "vmstats-modules": 1338,
                "vmstats-messages_in_queues": 0,
                "vmstats-memory.total": 86.81,
                "vmstats-memory.procs_used": 31.51,
                "vmstats-memory.ets": 2.52,
                "vmstats-memory.binary": 0.49,
                "vmstats-memory.atom_used": 1.43,
                "vmstats-io.bytes_out": 0,
                "vmstats-io.bytes_in": 0,
                "vmstats-gc.words_reclaimed": 261675,
                "vmstats-gc.count": 4,
                "vmstats-error_logger_queue_len": 0,
                "vmstats-atom_count": 44524
              }
        405:
          description: Method not allowed
  /stats/faxe:
    get:
      summary: FAXE stats
      description: Returns statistics the faxe application.
      produces:
        - application/json
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
                "running_temp_tasks": 0,
                "running_tasks": 0,
                "registered_templates": 4,
                "registered_tasks": 18,
                "permanent_tasks": 0,
                "faxe_version": "0.8.1",
                "data_throughput_sec": 11,
                "data_paths_known": 0
              }
        405:
          description: Method not allowed
  /tasks:
    get:
      summary: List of tasks
      description: Returns a (possibly filtered) list of all  tasks.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        405:
          description: "Method not allowed"
    parameters:
      - in: query
        name: order_by
        type: string
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        description: direction for ordering, 'asc' or (default) 'desc'
  /tasks/running:
    get:
      summary: List of running tasks.
      description: none
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        405:
          description: "Method not allowed"
    parameters:
      - in: query
        name: order_by
        type: string
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        description: direction for ordering, 'asc' or (default) 'desc'
  /tasks/by_template/{template_id}:
    get:
      summary: Tasks by Template
      description: Get a list of all tasks, that were created using the template with the given id
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "template_id"
        description: "Id of the template"
        required: true
        type: string
      - in: query
        name: order_by
        type: string
        default: changed
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        default: desc
        description: direction for ordering, 'asc' or (default) 'desc'
  /tasks/by_tags/{tags}:
    get:
      summary: Tasks by tags
      description: Get a list of all tasks, that have at least one of the given tags associated with them. Give a comma-separated list of tag-strings
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "tags"
        description: "comma separated list of tags"
        required: true
        type: "string"
      - in: query
        name: order_by
        type: string
        default: changed
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        default: desc
        description: direction for ordering, 'asc' or (default) 'desc'
  /task/{task_id}:
    get:
      summary: Get a task
      description: Get a task by its id
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Task'
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path" 
          name: "task_id"
          description: "Id of the task to read"
          required: true
          type: string
  /task/start/{task_id}:
    get:
      summary: Start a task.
      produces:
        - application/json
      responses:
        200:
          description: "Task started successfully"
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be started"
          required: true
          type: string
  /task/start/{task_id}/true:
    get:
      summary: Start a task permanently.
      description: A permanently started task will automatically be started on faxe startup.
      produces:
        - application/json
      responses:
        200:
          description: "Task started successfully"
          schema:
            $ref: '#/definitions/started'
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be started permanently"
          required: true
          type: string
  /task/stop/{task_id}:
    get:
      summary: Stop a task.
      produces:
        - application/json
      responses:
        200:
          description: "Task stopped successfully"
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be stopped"
          required: true
          type: string
  /task/stop/{task_id}/true:
    get:
      summary: Stop a task permanently.
      description: A permanently stopped task will NOT automatically be started on faxe startup anymore.
      produces:
        - application/json
      responses:
        200:
          description: "Task stopped successfully"
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be stopped permanently"
          required: true
          type: string
  /task/register:
    post:
      summary: "Register a task."
      description: "Provide a dfs script and a name for the new task"
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully parsed registered task"
          schema:
            properties:
              id:
                type: integer
                description: The newly created task ID
              name:
                type: string
                description: The task name
              success:
                type: boolean
                default: true
        400:
          description: "Error creating or parsing the task"
          schema:
            properties:
              success:
                type: boolean
                default: false
              error:
                type: string
                description: error message
        405:
          description: "Method not allowed."
      parameters:
        - in: "formData"
          name: "name"
          description: "Name for the newly registered task."
          type: "string"
          required: true
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script."
          type: "string"
          required: true
        - in: "formData"
          name: "tags"
          description: "A list of tags for the new task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])."
          type: string
          required: false
  /task/update/{task_id}:
    post:
      summary: "Update a task."
      description: "Provide a dfs script and a name, update can be done while a task is running."
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully updated task."
          schema:
            properties:
              id:
                type: integer
                description: The task ID
              name:
                type: string
                description: The task name
              success:
                type: boolean
                default: true
        400:
          description: "Error updating the task."
          schema:
            properties:
              success:
                type: boolean
                default: false
              error:
                type: string
                description: error message
        404:
          description: "Task not found."
        405:
          description: "Method not allowed."
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be updated."
          required: true
          type: string
        - in: "formData"
          name: "name"
          description: "Task name"
          type: "string"
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script."
          type: "string"
          required: true
        - in: "formData"
          name: "tags"
          description: "A list of tags for the task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])."
          type: "string"
  /task/from_template/{template_id}/{task_name}:
    post:
      summary: "Create task from template."
      description: "Registers a new task with name 'name' from the template with id 'template_id'."
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200: 
          description: "Task successfully registered."
        404:
          description: "Template with id 'template_id' not found."
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "template_id"
          type: string
          required: true
        - in: "path"
          name: "task_name"
          type: "string"
          required: true
        - in: "formData"
          name: "tags"
          description: "A list of tags for the new task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])."
          type: string
        - in: "formData"
          name: "vars"
          description: "A json object with vars for the new task, example: {\"var1\": 33}. Every definition (keyword 'def') in the template dfs can be overwritten."
          type: string
  /task/delete/{task_id}:
    delete:
      summary: "Delete a task"
      description: "Delete a task by it's id."
      produces:
        - application/json
      responses:
        200:
          description: "Task successfully deleted."
        404:
          description: "Task with id 'task_id' could not be found."
        405:
          description: "Method not allowed"
        406:
          description: "Task is running and must be stopped before it can be deleted."
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
  /task/add_tags/{task_id}:
    post:
      summary: Add tags to a task
      description: Add a list of tags to the specified task, note that a task will have a tag only once,
          it does not matter, if a task is added multiple times.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Tags were successfully added"
        404:
          description: Task with id task_id were not found
        405:
          description: Method not allowed
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
        - in: "formData"
          name: "tags"
          required: true
          description: "A list of tags for the task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])"
          type: string
  /task/remove_tags/{task_id}:
    post:
      summary: Remove tags from a task
      description: Remove a list of tags from the specified task
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Tags were successfully removed"
        404:
          description: Task with id task_id were not found
        405:
          description: Method not allowed
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
        - in: "formData"
          name: "tags"
          required: true
          description: "A list of tags, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])"
          type: string
  /task/logs/{task_id}:
    get:
      summary: Logs by task
      description: Get a list of Logs for a task. Logs are ordered by time desc.
      produces:
        - application/json
      responses:
        200:
          description: get a list of logs
          schema:
            $ref: '#/definitions/Logs'
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
        - in: "query"
          name: limit
          type: "integer"
          required: false
          default: 20
          description: limit the list of logs
        - in: "query"
          name: max_age
          type: integer
          default: 15
          description: max age of the logs in minutes
          required: false
  /graph/{task_id}:
    get:
      summary: Get the graph representation for a task
      description: The graph representation contains all nodes and edges, as well as some information about external connections a node may establish
      produces:
        - application/json
      responses:
        200:
          description: OK
        404:
          description: Not found
        405:
          description: Method not allowed
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true

  /tags:
    get:
      summary: List of tags
      description: Get a list of all tags currently in use
      produces:
        - application/json
      responses:
        200:
          description: OK
        405:
          description: Method not allowed
  /templates:
    get:
      summary: List of templates
      description: Returns a list of all templates currently registered with this faxe instance.
      produces:
        - application/json
      responses:
        200:
          description: OK
    parameters:
      - in: query
        name: order_by
        type: string
        default: changed
        description: order the list of templates by 'id', 'name' or (default) 'changed'
      - in: query
        name: dir
        type: string
        default: desc
        description: direction for ordering, 'asc' or (default) 'desc'
  /template/{template_id}:
    get:
      summary: Get a template
      description: Get a template by it's ID
      produces:
        - application/json
      responses:
        200:
          description: OK
        404:
          description: "Template not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path" 
          name: "template_id"
          description: "Id of the template to read"
          required: true
          type: string
  /template/register:
    post:
      summary: "Register a template"
      description: "Provide a dfs script and a name for the new template"
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully parsed and registered template"
        405:
          description: "Method not allowed"
      parameters:
        - in: "formData"
          name: "name"
          description: "Name for the newly registered template"
          type: "string"
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script"
          type: "string"  
  /template/delete/{template_id}:
    delete:
      summary: "Delete a template"
      produces:
        - application/json
      responses:
        200:
          description: "Template successfully deleted."
        404:
          description: "Template with id 'task_id' could not be found."
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "template_id"
          type: string
          required: true
  /task/start_temp:
    post:
      summary: "Start a temporary task"
      description: "Start the given dfs script with a TTL, runtime can be extended with a call to /task/ping/:task_id \n when the timeout is over the task will stop and delete itself. Temporary tasks can not be restarted or updated!"
      produces:
        - 'application/json'
      consumes:
        - 'application/x-www-form-urlencoded'
      responses:
        200:
          description: "Successfully parsed the DFS script and started the task with the given ttl"
          schema:
            properties:
              id:
                type: string
                description: The task ID
              ttl:
                type: integer
                description: Time to live
              success:
                type: boolean
                default: true
        400:
          description: "An error occurred when parsing or starting the script"
          schema:
            properties:
              error:
                type: string
                description: String describing the error
              success:
                type: boolean
                default: false
      parameters:
        - in: "formData"
          name: "dfs"
          description: "DFS Script to run"
          type: "string"
          required: true
        - in: "formData"
          name: "ttl"
          description: "Timeout in milliseconds"
          type: "integer"
          required: true

  /task/start_debug/{task_id}:
    get:
      summary: Start debugging task with task_id
      produces:
        - application/json
      responses:
        200:
          description: OK
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          required: true
          type: string
  /task/stop_debug/{task_id}:
    get:
      summary: Stop debugging task with task_id
      produces:
        - application/json
      responses:
        200:
          description: OK
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          required: true
          type: string
  /task/ping/{task_id}:
    post:
      summary: "Extend the lifetime of a temporary task"
      responses:
        200:
          description: "Successfully extended the tasks lifetime"
          schema:
            properties:
              id:
                type: string
                description: The task ID
              ttl:
                type: integer
                description: Time to live
              success:
                type: boolean
                default: true
        400:
          description: "An error occurred. Maybe the tasks has stopped already or was not found."
          schema:
            properties:
              error:
                type: string
                description: String describing the error
              success:
                type: boolean
                default: false
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task"
          required: true
          type: string

definitions:
  started:
    type: object
    properties:
      ok:
        type: string
        description: "started"
  Task:
    type: object
    properties:
      id:
        type: integer
        description: The task ID
      name:
        type: string
        description: The task name
      dfs:
        type: string
        description: The DFS Script
      tags:
        $ref: '#/definitions/Tags'
      vars:
        $ref: '#/definitions/TemplateVars'
        description: If created by a template, contains objects of vars used when creating
      template:
        type: string
        description: If created by template, contains the name of the template used for creation
      running:
        type: boolean
        description: Whether the task is running at the moment
      permanent:
        type: boolean
        description: Whether the task is to be started permanent
      changed:
        type: string
        format: ISO8601
        description: Time the task was changed the last time
      last_start:
        type: string
        format: ISO8601
        description: Time the task was last started
      last_stop:
        type: string
        format: ISO8601
        description: Time the task was last stopped
  ArrayOfTasks:
    type: array
    items:
      $ref: '#/definitions/Task'
  TemplateVars:
    type: object
    example:
      {"template_vars": {"var1": "val1", "var2": "val2"}}
  Tags:
    type: array
    items:
      type: string
    example:
      ["tag1", "tag2", "tag3"]
  LogEntry:
    type: object
    properties:
      severity:
          type: string
          example:
            "warning"
      meta:
        type: string
        description: a json string
        example:
          "{\"node\":\"faxe1@ubuntu\",\"pid\":\"<0.1684.0>\",\"application\":\"faxe\",\"line\":45,\"module\":\"esp_debug\",\"function\":\"do_log\"}"
      flow:
        type: string
        example: "flow_1"
      datetime:
        type: string
        format: ISO8601
        example: "2020-02-26T15:40:33.010000Z"
      comp:
        type: string
        description: the flow node
        example:
          "crate_query1"
  LogEntries:
    type: array
    items:
      $ref: '#/definitions/LogEntry'
  Logs:
    type: object
    properties:
      logs:
        $ref: '#/definitions/LogEntries'