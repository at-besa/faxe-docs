{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Faxe Flow based data-collector and time-centric data-processor. Rest Api With the rest api for faxe you can list , register , start , stop , delete , ... faxe tasks. General Data in faxe In faxe we deal with data_points and data_batches . Every data_point consists of a ts field, fields and tags . The value of the ts field is always: unix-timestamp in millisecond precision without a timezone . fields and tags are essentially key-value maps . Valid data-types for field and tag values are: string, integer, float, key-value map (also deeply nested) and lists . The only valid data-type for field and tag keys is string . A data_batch consists of a list of data_points ordered by timestamp. Most faxe nodes can deal with both points and batches. Value referencing As field and tag values can be deeply nested maps and lists, it is possible to use a JSON-path like syntax to declare and reference these values: Valid examples: averages axis.z.cur value.sub[2].data averages.emitted[5]","title":"Faxe"},{"location":"index.html#faxe","text":"Flow based data-collector and time-centric data-processor.","title":"Faxe"},{"location":"index.html#rest-api","text":"With the rest api for faxe you can list , register , start , stop , delete , ... faxe tasks.","title":"Rest Api"},{"location":"index.html#general","text":"","title":"General"},{"location":"index.html#data-in-faxe","text":"In faxe we deal with data_points and data_batches . Every data_point consists of a ts field, fields and tags . The value of the ts field is always: unix-timestamp in millisecond precision without a timezone . fields and tags are essentially key-value maps . Valid data-types for field and tag values are: string, integer, float, key-value map (also deeply nested) and lists . The only valid data-type for field and tag keys is string . A data_batch consists of a list of data_points ordered by timestamp. Most faxe nodes can deal with both points and batches.","title":"Data in faxe"},{"location":"index.html#value-referencing","text":"As field and tag values can be deeply nested maps and lists, it is possible to use a JSON-path like syntax to declare and reference these values: Valid examples: averages axis.z.cur value.sub[2].data averages.emitted[5]","title":"Value referencing"},{"location":"dfs_script_language/index.html","text":"Introducing the DFS Script Language Faxe uses a DSL called dfs (Dataflow Scripting Language). Dfs is heavily influenced by InfluxData's TICKScript , in fact faxe started out as a clone of Kapacitor. To get a basic understanding of dfs, you can therefore read Introducing the TICKscript language . Some notable differencies between TICKScript and dfs include: dfs uses the def keyword for declarations for comments the % sign is used in dfs there are no top-level stream or batch nodes lambda expression use different functions regular expressions start and end with '?' There is more, we will get to that ... In general dfs is used to build up DAGs (Directed Acyclic Graph) of computing nodes via a script language. While reading TICKscript syntax will help you get more understanding of dfs , here is also were the differences between TICKScript and dfs start to get bigger (tough not so much in syntax, so reading is recommended). After that, lets dive right in and override some details you just read about TICKScript: DFS Keywords Word Usage true boolean true false boolean false TRUE boolean true FALSE boolean false lambda: used to denote lambda expression def starts a variable declaration Operators Operator Usage + addition operator - substraction operator / division operator * multiplication operator AND and OR or < less than > greater than =< less than or equal <= less than or equal => greater or equal >= greater or equal == equal != Not equal /= Not equal ! Logical Not rem remainder div integer division These operators are mainly used in Lambda expressions in faxe. Chaining operators Operator Usage Example | Used to declare a new node instance and chains it to the node above it (if any) |some_node() |debug() . Declares a property (or parameter) call, setting or changing an internal param in the node to which it belongs |log() .file('log1.txt') @ Declares a user defined node written in python. Same as |, but for user defined nodes |some_node() ... @mynode() Variables and literals Variables are declared using the keyword def at the start of a declaration. Variables are immutable and cannot be reassigned new values later on in the script, though they can be used in other declarations and can be passed into methods. Variable declarations def string = 'this is a string !' def text = <<< this is a text with some weird chars :// %& >>> def func = lambda: \"value\" / 3 def meas = 4.44 % A lambda expression as literal def func2 = lambda: int(meas / 13) def an_int = 32342 def a_float = 2131.342 % a chain can also be bound to a declaration def in1 = |mqtt_subscribe() .host('127.0.0.1') .topic('some/topic') % it can then be used like so in1 |debug() Datatypes DFS recognizes six types, the type of the literal will be interpreted from its declaration. Type name Description Examples string String type. Single quotes are used for string, string can also be multiline 'this_is_a_string' text Text type. Mostly used where strings are used <<< SELECT MEAN(obj['current']) FROM mytable >>> integer Integer type. Arbitrarily big ints are allowed 123456789987654321, 55 float Floating point number. May be arbitrarily big 12.343422023, 5.6 duration A duration literal. See section below. 34s, 500ms, 2d lambda A lambda expression. See extra section in this documentarion lambda: str_downcase('BIG') Duration literals Duration literals define a span of time. A duration literal is comprised of two parts: an integer and a duration unit. It is essentially an integer terminated by one or a pair of reserved characters, which represent a unit of time. The following table presents the time units used in declaring duration types. Unit Meaning ms millisecond s second m minute h hour d day w week Internally all time and duration related values are converted to milliseconds in faxe. Examples def span = 10s def frequency = 10m def short = 50ms |win_time() .period(1h) .every(30m)","title":"Introducing the DFS Script Language"},{"location":"dfs_script_language/index.html#introducing-the-dfs-script-language","text":"Faxe uses a DSL called dfs (Dataflow Scripting Language). Dfs is heavily influenced by InfluxData's TICKScript , in fact faxe started out as a clone of Kapacitor. To get a basic understanding of dfs, you can therefore read Introducing the TICKscript language . Some notable differencies between TICKScript and dfs include: dfs uses the def keyword for declarations for comments the % sign is used in dfs there are no top-level stream or batch nodes lambda expression use different functions regular expressions start and end with '?' There is more, we will get to that ... In general dfs is used to build up DAGs (Directed Acyclic Graph) of computing nodes via a script language. While reading TICKscript syntax will help you get more understanding of dfs , here is also were the differences between TICKScript and dfs start to get bigger (tough not so much in syntax, so reading is recommended). After that, lets dive right in and override some details you just read about TICKScript:","title":"Introducing the DFS Script Language"},{"location":"dfs_script_language/index.html#dfs","text":"","title":"DFS"},{"location":"dfs_script_language/index.html#keywords","text":"Word Usage true boolean true false boolean false TRUE boolean true FALSE boolean false lambda: used to denote lambda expression def starts a variable declaration","title":"Keywords"},{"location":"dfs_script_language/index.html#operators","text":"Operator Usage + addition operator - substraction operator / division operator * multiplication operator AND and OR or < less than > greater than =< less than or equal <= less than or equal => greater or equal >= greater or equal == equal != Not equal /= Not equal ! Logical Not rem remainder div integer division These operators are mainly used in Lambda expressions in faxe.","title":"Operators"},{"location":"dfs_script_language/index.html#chaining-operators","text":"Operator Usage Example | Used to declare a new node instance and chains it to the node above it (if any) |some_node() |debug() . Declares a property (or parameter) call, setting or changing an internal param in the node to which it belongs |log() .file('log1.txt') @ Declares a user defined node written in python. Same as |, but for user defined nodes |some_node() ... @mynode()","title":"Chaining operators"},{"location":"dfs_script_language/index.html#variables-and-literals","text":"Variables are declared using the keyword def at the start of a declaration. Variables are immutable and cannot be reassigned new values later on in the script, though they can be used in other declarations and can be passed into methods.","title":"Variables and literals"},{"location":"dfs_script_language/index.html#variable-declarations","text":"def string = 'this is a string !' def text = <<< this is a text with some weird chars :// %& >>> def func = lambda: \"value\" / 3 def meas = 4.44 % A lambda expression as literal def func2 = lambda: int(meas / 13) def an_int = 32342 def a_float = 2131.342 % a chain can also be bound to a declaration def in1 = |mqtt_subscribe() .host('127.0.0.1') .topic('some/topic') % it can then be used like so in1 |debug()","title":"Variable declarations"},{"location":"dfs_script_language/index.html#datatypes","text":"DFS recognizes six types, the type of the literal will be interpreted from its declaration. Type name Description Examples string String type. Single quotes are used for string, string can also be multiline 'this_is_a_string' text Text type. Mostly used where strings are used <<< SELECT MEAN(obj['current']) FROM mytable >>> integer Integer type. Arbitrarily big ints are allowed 123456789987654321, 55 float Floating point number. May be arbitrarily big 12.343422023, 5.6 duration A duration literal. See section below. 34s, 500ms, 2d lambda A lambda expression. See extra section in this documentarion lambda: str_downcase('BIG')","title":"Datatypes"},{"location":"dfs_script_language/index.html#duration-literals","text":"Duration literals define a span of time. A duration literal is comprised of two parts: an integer and a duration unit. It is essentially an integer terminated by one or a pair of reserved characters, which represent a unit of time. The following table presents the time units used in declaring duration types. Unit Meaning ms millisecond s second m minute h hour d day w week Internally all time and duration related values are converted to milliseconds in faxe.","title":"Duration literals"},{"location":"dfs_script_language/index.html#examples","text":"def span = 10s def frequency = 10m def short = 50ms |win_time() .period(1h) .every(30m)","title":"Examples"},{"location":"dfs_script_language/lambda_expressions.html","text":"Lambda expressions Overview DFS uses lambda expressions to define transformations on data points as well as define Boolean conditions that act as filters. Lambda expressions wrap mathematical operations, Boolean operations, internal function calls or a combination of all three. All lambda expressions in DFS begin with the lambda: keyword. .where(lambda: \"topic\" == 'ttop/grap/prec') In the above example \"topic\" is used to access the value of a field called topic from the current data_point and compared against the string 'ttop/grap/prec' . Note here that literal string values are declared using single quotes, while double quotes are used only in lambda expressions to access the values of tags and fields. ! As field and tag values can be deeply nested maps and lists, it is possible to use a JSON-path like syntax to reference them: Valid examples: \"averages\" \"axis.z.cur\" \"value.sub[2].data\" \"averages.emitted[5]\" Built-in functions Type conversion With a few exceptions every type can be converted to every other type. Bool bool(a_value) -> true|false Integer int(value) -> integer Float float(value) -> float String string(val) -> string Time functions Every data_point in faxe contains a field called ts . Function Description to_iso8601(ts) -> string converts the timestamp to an ISO8601 string millisecond(ts) -> integer milliseconds within the second [0, 999] second(ts) -> integer second within the minute [0, 59] minute(ts) -> integer minute within the hour [0, 59] hour(ts) -> integer hour within the day [0, 23] day(ts) -> integer day within the month [1, 31] day_of_week(ts) -> integer the weekday with week [1, 7] 1 is monday week(ts) -> integer isoweek-number within year [1, 53] month(ts) -> integer month within the year [1, 12] Example: lambda: hour(\"ts\") >= 8 AND hour(\"ts\") < 19 The above expression evaluates to true if the hour of the day for the data point falls between 08:00 and 19:00. Math functions Function Description abs(x) -> number acos(x) -> float acosh(x) -> float asin(x) -> float asinh(x) -> float atan(x) -> float atan2(y, x) -> float atanh(x) -> float ceil(x) -> float cos(x) -> float cosh(x) -> float exp(x) -> float floor(x) -> float fmod(x, y) -> float log(x) -> float log10(x) -> float log2(x) -> float max(x, y) -> number min(x, y) -> number pow(x, y) -> float round(x) -> integer sin(x) -> float sinh(x) -> float sqrt(x) -> float tan(x) -> float tanh(x) -> float String functions Function Description str_at/2 str_capitalize/1 str_chunk/2 str_codepoints/1 str_contains/2 str_downcase/1 str_ends_with/2 str_ends_with_any/2 str_eqi/2 str_first/1 str_last/1 str_length/1 str_lstrip/1 str_lstrip/2 str_next_codepoint/1 str_normalize/2 str_pad_leading/2 str_pad_leading/3 str_pad_trailing/2 str_pad_trailing/3 str_replace/3 str_replace_leading/3 str_replace_prefix/3 str_replace_suffix/3 str_replace_trailing/3 str_reverse/1 str_rstrip/1 str_rstrip/2 str_slice/3 str_split/1 str_split/2 str_split/3 str_split_at/2 str_split_by_any/2 str_split_by_any/3 str_split_by_re/2 str_split_by_re/3 str_starts_with/2 str_starts_with_any/2 str_strip/1 str_strip/2 str_upcase/1 Conditional functions If Returns the result of its operands depending on the value of the first argument. The second and third arguments must return the same type. Example: |eval(lambda: if(\"field.val1\" > threshold AND \"field.val1\" != 0, 'true', 'false')) .as('value') The value of the field value in the above example will be the string true or false , depending on the condition passed as the first argument. The if function\u2019s return type is the same type as its second and third arguments. if(condition, true expression, false expression)","title":"Lambda expressions"},{"location":"dfs_script_language/lambda_expressions.html#lambda-expressions","text":"","title":"Lambda expressions"},{"location":"dfs_script_language/lambda_expressions.html#overview","text":"DFS uses lambda expressions to define transformations on data points as well as define Boolean conditions that act as filters. Lambda expressions wrap mathematical operations, Boolean operations, internal function calls or a combination of all three. All lambda expressions in DFS begin with the lambda: keyword. .where(lambda: \"topic\" == 'ttop/grap/prec') In the above example \"topic\" is used to access the value of a field called topic from the current data_point and compared against the string 'ttop/grap/prec' . Note here that literal string values are declared using single quotes, while double quotes are used only in lambda expressions to access the values of tags and fields.","title":"Overview"},{"location":"dfs_script_language/lambda_expressions.html#_1","text":"As field and tag values can be deeply nested maps and lists, it is possible to use a JSON-path like syntax to reference them: Valid examples: \"averages\" \"axis.z.cur\" \"value.sub[2].data\" \"averages.emitted[5]\"","title":"!"},{"location":"dfs_script_language/lambda_expressions.html#built-in-functions","text":"","title":"Built-in functions"},{"location":"dfs_script_language/lambda_expressions.html#type-conversion","text":"With a few exceptions every type can be converted to every other type. Bool bool(a_value) -> true|false Integer int(value) -> integer Float float(value) -> float String string(val) -> string","title":"Type conversion"},{"location":"dfs_script_language/lambda_expressions.html#time-functions","text":"Every data_point in faxe contains a field called ts . Function Description to_iso8601(ts) -> string converts the timestamp to an ISO8601 string millisecond(ts) -> integer milliseconds within the second [0, 999] second(ts) -> integer second within the minute [0, 59] minute(ts) -> integer minute within the hour [0, 59] hour(ts) -> integer hour within the day [0, 23] day(ts) -> integer day within the month [1, 31] day_of_week(ts) -> integer the weekday with week [1, 7] 1 is monday week(ts) -> integer isoweek-number within year [1, 53] month(ts) -> integer month within the year [1, 12] Example: lambda: hour(\"ts\") >= 8 AND hour(\"ts\") < 19 The above expression evaluates to true if the hour of the day for the data point falls between 08:00 and 19:00.","title":"Time functions"},{"location":"dfs_script_language/lambda_expressions.html#math-functions","text":"Function Description abs(x) -> number acos(x) -> float acosh(x) -> float asin(x) -> float asinh(x) -> float atan(x) -> float atan2(y, x) -> float atanh(x) -> float ceil(x) -> float cos(x) -> float cosh(x) -> float exp(x) -> float floor(x) -> float fmod(x, y) -> float log(x) -> float log10(x) -> float log2(x) -> float max(x, y) -> number min(x, y) -> number pow(x, y) -> float round(x) -> integer sin(x) -> float sinh(x) -> float sqrt(x) -> float tan(x) -> float tanh(x) -> float","title":"Math functions"},{"location":"dfs_script_language/lambda_expressions.html#string-functions","text":"Function Description str_at/2 str_capitalize/1 str_chunk/2 str_codepoints/1 str_contains/2 str_downcase/1 str_ends_with/2 str_ends_with_any/2 str_eqi/2 str_first/1 str_last/1 str_length/1 str_lstrip/1 str_lstrip/2 str_next_codepoint/1 str_normalize/2 str_pad_leading/2 str_pad_leading/3 str_pad_trailing/2 str_pad_trailing/3 str_replace/3 str_replace_leading/3 str_replace_prefix/3 str_replace_suffix/3 str_replace_trailing/3 str_reverse/1 str_rstrip/1 str_rstrip/2 str_slice/3 str_split/1 str_split/2 str_split/3 str_split_at/2 str_split_by_any/2 str_split_by_any/3 str_split_by_re/2 str_split_by_re/3 str_starts_with/2 str_starts_with_any/2 str_strip/1 str_strip/2 str_upcase/1","title":"String functions"},{"location":"dfs_script_language/lambda_expressions.html#conditional-functions","text":"If Returns the result of its operands depending on the value of the first argument. The second and third arguments must return the same type. Example: |eval(lambda: if(\"field.val1\" > threshold AND \"field.val1\" != 0, 'true', 'false')) .as('value') The value of the field value in the above example will be the string true or false , depending on the condition passed as the first argument. The if function\u2019s return type is the same type as its second and third arguments. if(condition, true expression, false expression)","title":"Conditional functions"},{"location":"nodes/index.html","text":"Faxe nodes Parameters Every parameter with no default value is mandatory !","title":"Faxe nodes"},{"location":"nodes/index.html#faxe-nodes","text":"","title":"Faxe nodes"},{"location":"nodes/index.html#parameters","text":"Every parameter with no default value is mandatory !","title":"Parameters"},{"location":"nodes/amqp_consume.html","text":"The amqp_consume node Consume data from an amqp-broker like rabbitmq. When prefetch is given and is > 1, then this node will emit a data_batch instead of a data_point. Example |amqp_consume() .host('deves-amqp-cluster1.internal') .routing_key('my.routing.key') .exchange('x_xchange') .queue('faxe_test') .dt_field('UTC-Time') .dt_format('float_micro') Parameters Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 5672 vhost( string ) vhost to connect to on the broker '/' routing_key( string ) routing key to use for queue binding queue( string ) name of the queue to bind to the exchange exchange( string ) name of the exchange to bind to the source prefetch( integer ) prefetch count to use 1 dt_field( string ) name of the timestamp field that is expected 'ts' dt_format( string ) timestamp or datetime format that is expected (see table below) 'millisecond' ssl( is_set ) whether to use ssl false (not set) Available datetime formats dt_format description example 'millisecond' timestamp UTC in milliseconds 1565343079000 'second' timestamp UTC in seconds 1565343079 'float_micro' timestamp UTC float with microsecond precision 1565343079.173588 'float_millisecond' timestamp UTC float with millisecond precision 1565343079.173 'ISO8601' ISO8601 Datetime format string '2011-10-05T14:48:00.000Z' 'RFC3339' RFC3339 Datetime format string '2018-02-01 15:18:02.088Z' 'convtrack_datetime' special datetime format used in the conveyor tracking data stream '19.08.01 17:33:44,867 '","title":"Amqp consume"},{"location":"nodes/amqp_consume.html#the-amqp_consume-node","text":"Consume data from an amqp-broker like rabbitmq. When prefetch is given and is > 1, then this node will emit a data_batch instead of a data_point.","title":"The amqp_consume node"},{"location":"nodes/amqp_consume.html#example","text":"|amqp_consume() .host('deves-amqp-cluster1.internal') .routing_key('my.routing.key') .exchange('x_xchange') .queue('faxe_test') .dt_field('UTC-Time') .dt_format('float_micro')","title":"Example"},{"location":"nodes/amqp_consume.html#parameters","text":"Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 5672 vhost( string ) vhost to connect to on the broker '/' routing_key( string ) routing key to use for queue binding queue( string ) name of the queue to bind to the exchange exchange( string ) name of the exchange to bind to the source prefetch( integer ) prefetch count to use 1 dt_field( string ) name of the timestamp field that is expected 'ts' dt_format( string ) timestamp or datetime format that is expected (see table below) 'millisecond' ssl( is_set ) whether to use ssl false (not set)","title":"Parameters"},{"location":"nodes/amqp_consume.html#available-datetime-formats","text":"dt_format description example 'millisecond' timestamp UTC in milliseconds 1565343079000 'second' timestamp UTC in seconds 1565343079 'float_micro' timestamp UTC float with microsecond precision 1565343079.173588 'float_millisecond' timestamp UTC float with millisecond precision 1565343079.173 'ISO8601' ISO8601 Datetime format string '2011-10-05T14:48:00.000Z' 'RFC3339' RFC3339 Datetime format string '2018-02-01 15:18:02.088Z' 'convtrack_datetime' special datetime format used in the conveyor tracking data stream '19.08.01 17:33:44,867 '","title":"Available datetime formats"},{"location":"nodes/amqp_publish.html","text":"The amqp_publish node Publish data to an amqp-broker exchange like rabbitmq. Incoming data is converted to JSON before sending. Example |amqp_publish() .host('127.0.0.1') .routing_key('my.routing.key') .exchange('x_xchange') Parameters Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 5672 vhost( string ) vhost to connect to on the broker '/' routing_key( string ) routing key for the published messages exchange( string ) name of the exchange to publish to ssl( is_set ) whether to use ssl false (not set)","title":"Amqp publish"},{"location":"nodes/amqp_publish.html#the-amqp_publish-node","text":"Publish data to an amqp-broker exchange like rabbitmq. Incoming data is converted to JSON before sending.","title":"The amqp_publish node"},{"location":"nodes/amqp_publish.html#example","text":"|amqp_publish() .host('127.0.0.1') .routing_key('my.routing.key') .exchange('x_xchange')","title":"Example"},{"location":"nodes/amqp_publish.html#parameters","text":"Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 5672 vhost( string ) vhost to connect to on the broker '/' routing_key( string ) routing key for the published messages exchange( string ) name of the exchange to publish to ssl( is_set ) whether to use ssl false (not set)","title":"Parameters"},{"location":"nodes/change_detect.html","text":"The change_detect node Emits new point-values only if different from the previous point. Normal (non-exclusive) behaviour is: the node emits every value that is either not in the fields list or it has changed Multiple fields can be monitored by this node If reset_timeout is given, all previous values are reset, if there are no points coming in for this amount of time With the exclusive flag set, every given monitor field has to have a changed value in order for the node to emit anything For value comparison erlang's strict equals (=:=) is used, so 1.0 is not equal to 1 Example |change_detect() .fields('val') .reset_timeout(3s) Parameters Parameter Description Default fields( string_list ) List of fields to monitor reset_timeout( duration ) Previous values TTL 3h exclusive( is_set ) whether exclusive mode in on false (not set)","title":"Change detect"},{"location":"nodes/change_detect.html#the-change_detect-node","text":"Emits new point-values only if different from the previous point. Normal (non-exclusive) behaviour is: the node emits every value that is either not in the fields list or it has changed Multiple fields can be monitored by this node If reset_timeout is given, all previous values are reset, if there are no points coming in for this amount of time With the exclusive flag set, every given monitor field has to have a changed value in order for the node to emit anything For value comparison erlang's strict equals (=:=) is used, so 1.0 is not equal to 1","title":"The change_detect node"},{"location":"nodes/change_detect.html#example","text":"|change_detect() .fields('val') .reset_timeout(3s)","title":"Example"},{"location":"nodes/change_detect.html#parameters","text":"Parameter Description Default fields( string_list ) List of fields to monitor reset_timeout( duration ) Previous values TTL 3h exclusive( is_set ) whether exclusive mode in on false (not set)","title":"Parameters"},{"location":"nodes/combine.html","text":"The combine node Combine the values of 2 nodes, use to enrich data from one node. Port 1 is the trigger port. Every time a value is received on the trigger port, the node will emit a value, combined with whatever current value on port 2. The node will never emit on port 2 values. No output is given, as long as there has not arrived a value on port 2 to combine with. The fields parameter defines the fields to inject into the combination for the stream on port 2. To rename these fields, parameter prefix or aliases can be used. With prefix_delimiter a delimiter can be given, defaults to: '_' Example def in1 = |value_emitter() .every(500ms) .type(point) .fields('val') def in2 = |value_emitter() .every(4s) .type(point) .fields('val2', 'val3') in1 |combine(in2) .fields('val2', 'val3') .prefix('comb') .prefix_delimiter('_') In this example values from the stream called in1 will be enriched with values from in2 . Outputfields will be called: val , comb_val2 and comb_val3 . The flow will emit every 500 milliseconds after 4 seconds have past initially. Parameters Parameter Description Default fields( string_list ) List of fields to include [] tags( string_list ) List of tags to include [] aliases( string_list ) List of field aliases to use instead of the original field names [] prefix( string ) Prefix for the injected fields from stream 2 undefined prefix_delimiter( string ) Used to separate prefix and the original field name from stream 2 '_' Either prefix or aliases must be given these are mutually exclusive parameters. If both are given, then prefix will win.","title":"Combine"},{"location":"nodes/combine.html#the-combine-node","text":"Combine the values of 2 nodes, use to enrich data from one node. Port 1 is the trigger port. Every time a value is received on the trigger port, the node will emit a value, combined with whatever current value on port 2. The node will never emit on port 2 values. No output is given, as long as there has not arrived a value on port 2 to combine with. The fields parameter defines the fields to inject into the combination for the stream on port 2. To rename these fields, parameter prefix or aliases can be used. With prefix_delimiter a delimiter can be given, defaults to: '_'","title":"The combine node"},{"location":"nodes/combine.html#example","text":"def in1 = |value_emitter() .every(500ms) .type(point) .fields('val') def in2 = |value_emitter() .every(4s) .type(point) .fields('val2', 'val3') in1 |combine(in2) .fields('val2', 'val3') .prefix('comb') .prefix_delimiter('_') In this example values from the stream called in1 will be enriched with values from in2 . Outputfields will be called: val , comb_val2 and comb_val3 . The flow will emit every 500 milliseconds after 4 seconds have past initially.","title":"Example"},{"location":"nodes/combine.html#parameters","text":"Parameter Description Default fields( string_list ) List of fields to include [] tags( string_list ) List of tags to include [] aliases( string_list ) List of field aliases to use instead of the original field names [] prefix( string ) Prefix for the injected fields from stream 2 undefined prefix_delimiter( string ) Used to separate prefix and the original field name from stream 2 '_' Either prefix or aliases must be given these are mutually exclusive parameters. If both are given, then prefix will win.","title":"Parameters"},{"location":"nodes/crate_query.html","text":"The crate_query node Query the CRATE database for time series data . This node is experimental . The select statement will be executed periodically according to the every parameter. Each time the database is queried, the timestamps will be set according to period . Example def host = '10.14.204.8' def port = 5433 def query = <<< SELECT avg(data_obj['x']['cur']) AS x_cur, avg(data_obj['y']['cur']) AS y_cur, avg(data_obj['z']['cur']) AS z_cur, avg(data_obj['yaw']['cur']) AS yaw_cur, avg(data_obj['pitch']['cur']) AS pitch_cur FROM robotplc_parted; >>> def s = |crate_query() .host(host) .port(port) .user('crate') .database('doc') .query(query) .group_by_time(3m) .every(15s) .period(30m) .align() The above example will execute the query every 15 seconds. It get data which is in the timerange now -30 minutes and now . Parameters Parameter Description Default host( string ) CrateDB host port( integer ) CrateDB port user( string ) username pass( string ) password '' database( string ) Database name query( string text ) 'SELECT-FROM' clause of the db query time_field( string ) name of the timefield to use 'ts' every( duration ) time between query execution 5s period( duration ) time span of data to query 1h align( is_set ) whether to align period to full every durations false (not set) group_by_time( duration ) group the aggregations into time buckets 2m group_by( string_list ) additional group by [] limit( string ) LIMIT statement '30'","title":"Crate query"},{"location":"nodes/crate_query.html#the-crate_query-node","text":"Query the CRATE database for time series data . This node is experimental . The select statement will be executed periodically according to the every parameter. Each time the database is queried, the timestamps will be set according to period .","title":"The crate_query node"},{"location":"nodes/crate_query.html#example","text":"def host = '10.14.204.8' def port = 5433 def query = <<< SELECT avg(data_obj['x']['cur']) AS x_cur, avg(data_obj['y']['cur']) AS y_cur, avg(data_obj['z']['cur']) AS z_cur, avg(data_obj['yaw']['cur']) AS yaw_cur, avg(data_obj['pitch']['cur']) AS pitch_cur FROM robotplc_parted; >>> def s = |crate_query() .host(host) .port(port) .user('crate') .database('doc') .query(query) .group_by_time(3m) .every(15s) .period(30m) .align() The above example will execute the query every 15 seconds. It get data which is in the timerange now -30 minutes and now .","title":"Example"},{"location":"nodes/crate_query.html#parameters","text":"Parameter Description Default host( string ) CrateDB host port( integer ) CrateDB port user( string ) username pass( string ) password '' database( string ) Database name query( string text ) 'SELECT-FROM' clause of the db query time_field( string ) name of the timefield to use 'ts' every( duration ) time between query execution 5s period( duration ) time span of data to query 1h align( is_set ) whether to align period to full every durations false (not set) group_by_time( duration ) group the aggregations into time buckets 2m group_by( string_list ) additional group by [] limit( string ) LIMIT statement '30'","title":"Parameters"},{"location":"nodes/debug.html","text":"The debug node The debug node logs all incoming data with erlang's lager framework and emits it, without touching it. Where the logs will be written, depends on the lager config. Example |debug() Parameters Parameter Description Default","title":"Debug"},{"location":"nodes/debug.html#the-debug-node","text":"The debug node logs all incoming data with erlang's lager framework and emits it, without touching it. Where the logs will be written, depends on the lager config.","title":"The debug node"},{"location":"nodes/debug.html#example","text":"|debug()","title":"Example"},{"location":"nodes/debug.html#parameters","text":"Parameter Description Default","title":"Parameters"},{"location":"nodes/default.html","text":"The default node Add fields and/or tags to a data_point or batch if they do not already exist. Does not overwrite or update any fields or tags. Example |default() .fields('id', 'vs', 'df') .field_values('some_id', 1, '05.043') The above example will set the field id to the value 'some_id' , if a field with the name id does not already exist. Accordingly vs will be set to 1, df will be set to '05.043'. Parameters Parameter Description Default fields( string_list ) list of fieldnames [] field_values( list ) list of values for the given fields (must have the same length as fieldnames) [] tags( string_list ) list of tagnames [] tag_values( list ) list of values for the given tags (must have the same length as tagnames) []","title":"Default"},{"location":"nodes/default.html#the-default-node","text":"Add fields and/or tags to a data_point or batch if they do not already exist. Does not overwrite or update any fields or tags.","title":"The default node"},{"location":"nodes/default.html#example","text":"|default() .fields('id', 'vs', 'df') .field_values('some_id', 1, '05.043') The above example will set the field id to the value 'some_id' , if a field with the name id does not already exist. Accordingly vs will be set to 1, df will be set to '05.043'.","title":"Example"},{"location":"nodes/default.html#parameters","text":"Parameter Description Default fields( string_list ) list of fieldnames [] field_values( list ) list of values for the given fields (must have the same length as fieldnames) [] tags( string_list ) list of tagnames [] tag_values( list ) list of values for the given tags (must have the same length as tagnames) []","title":"Parameters"},{"location":"nodes/delete.html","text":"The delete node Delete fields and/or tags from a data_point or from all data_points in a data_batch. Example |delete() .fields('temp', 'data.meta[3]') The above example will delete the field named temp and the third array entry of the field data.meta . Parameters Parameter Description Default fields( string_list ) list of fieldnames to delete [] tags( string_list ) list of tagnames to delete []","title":"Delete"},{"location":"nodes/delete.html#the-delete-node","text":"Delete fields and/or tags from a data_point or from all data_points in a data_batch.","title":"The delete node"},{"location":"nodes/delete.html#example","text":"|delete() .fields('temp', 'data.meta[3]') The above example will delete the field named temp and the third array entry of the field data.meta .","title":"Example"},{"location":"nodes/delete.html#parameters","text":"Parameter Description Default fields( string_list ) list of fieldnames to delete [] tags( string_list ) list of tagnames to delete []","title":"Parameters"},{"location":"nodes/eval.html","text":"The eval node Evaluate one or more lambda expressions. For an explanation of lambdas, see lambda . The list of lambda expressions given, will be evaluated in a serial fashion. This means that a lambda can use the result of a previous expression. Examples |eval() .lambdas(lambda: \"val\" * 2, lambda: \"double\" / 2) .as('double', 'val') This example demonstrates the 'serial' behaviour of the eval node. The second expression uses the field double , which the first expression just created. |eval() .lambdas( lambda: int(str_concat(string(int(\"val\")),string(int(\"val\")))) ) .as('concat_string.int') The above example uses several built in casting and string functions to demonstrate complex expressions. For more lambda examples see lambda Parameters Parameter Description Default lambdas( lambda_list ) list of lambda expressions as( string_list ) list of output fieldnames (must have the same length as lambdas ) tags ( string_list ) list of output tagnames []","title":"Eval"},{"location":"nodes/eval.html#the-eval-node","text":"Evaluate one or more lambda expressions. For an explanation of lambdas, see lambda . The list of lambda expressions given, will be evaluated in a serial fashion. This means that a lambda can use the result of a previous expression.","title":"The eval node"},{"location":"nodes/eval.html#examples","text":"|eval() .lambdas(lambda: \"val\" * 2, lambda: \"double\" / 2) .as('double', 'val') This example demonstrates the 'serial' behaviour of the eval node. The second expression uses the field double , which the first expression just created. |eval() .lambdas( lambda: int(str_concat(string(int(\"val\")),string(int(\"val\")))) ) .as('concat_string.int') The above example uses several built in casting and string functions to demonstrate complex expressions. For more lambda examples see lambda","title":"Examples"},{"location":"nodes/eval.html#parameters","text":"Parameter Description Default lambdas( lambda_list ) list of lambda expressions as( string_list ) list of output fieldnames (must have the same length as lambdas ) tags ( string_list ) list of output tagnames []","title":"Parameters"},{"location":"nodes/http_post.html","text":"The http_post node Sends incoming data to a specified HTTP endpoint via the POST method as a JSON message. If any errors occur during the request, the node will attempt to retry sending. Example |http_post() .host('remote.com') .port(8088) .path('/receive/json') Sends all incoming data to http://remote.com:8088/receive/json in JSON format. Parameters Parameter Description Default host( string ) hostname or ip address of endpoint port( integer ) port number path( string ) URI path of the http endpoint ''","title":"Http post"},{"location":"nodes/http_post.html#the-http_post-node","text":"Sends incoming data to a specified HTTP endpoint via the POST method as a JSON message. If any errors occur during the request, the node will attempt to retry sending.","title":"The http_post node"},{"location":"nodes/http_post.html#example","text":"|http_post() .host('remote.com') .port(8088) .path('/receive/json') Sends all incoming data to http://remote.com:8088/receive/json in JSON format.","title":"Example"},{"location":"nodes/http_post.html#parameters","text":"Parameter Description Default host( string ) hostname or ip address of endpoint port( integer ) port number path( string ) URI path of the http endpoint ''","title":"Parameters"},{"location":"nodes/http_post_crate.html","text":"The http_post_crate node Sends data to a CRATE DB HTTP endpoint using Crate's HTTP Api. If any errors occur during the request, the node will attempt to retry sending. Example def db_table = 'grip_log_fulltext3' def db_fields = ['id', 'df', 'vs', 'topic'] def faxe_fields = ['id', 'df', 'vs', 'topic'] |http_post_crate() .host(<<< http://deves-crate.internal >>>) .port(4201) .table(db_table) .db_fields(db_fields) .faxe_fields(faxe_fields) .remaining_fields_as('data_obj') Inserts the faxe-fields id , df , vs , topic into the db-fields with the same names and all remaining fields into the db-field named data_obj (which is of type 'OBJECT') in the table grip_log_fulltext3 . Parameters Parameter Description Default host( string ) hostname or ip address of endpoint port( integer ) port number table( string ) database tablename 'doc' db_fields( string_list ) db fieldnames (mapping for faxe fieldname to table field names) faxe_fields( string_list ) faxe fieldnames (mapping for faxe fieldname to table field names) remaining_fields_as( string ) if given inserts all fields not in faxe_fields into the given field, which must be of type 'object' undefined","title":"Http post crate"},{"location":"nodes/http_post_crate.html#the-http_post_crate-node","text":"Sends data to a CRATE DB HTTP endpoint using Crate's HTTP Api. If any errors occur during the request, the node will attempt to retry sending.","title":"The http_post_crate node"},{"location":"nodes/http_post_crate.html#example","text":"def db_table = 'grip_log_fulltext3' def db_fields = ['id', 'df', 'vs', 'topic'] def faxe_fields = ['id', 'df', 'vs', 'topic'] |http_post_crate() .host(<<< http://deves-crate.internal >>>) .port(4201) .table(db_table) .db_fields(db_fields) .faxe_fields(faxe_fields) .remaining_fields_as('data_obj') Inserts the faxe-fields id , df , vs , topic into the db-fields with the same names and all remaining fields into the db-field named data_obj (which is of type 'OBJECT') in the table grip_log_fulltext3 .","title":"Example"},{"location":"nodes/http_post_crate.html#parameters","text":"Parameter Description Default host( string ) hostname or ip address of endpoint port( integer ) port number table( string ) database tablename 'doc' db_fields( string_list ) db fieldnames (mapping for faxe fieldname to table field names) faxe_fields( string_list ) faxe fieldnames (mapping for faxe fieldname to table field names) remaining_fields_as( string ) if given inserts all fields not in faxe_fields into the given field, which must be of type 'object' undefined","title":"Parameters"},{"location":"nodes/join.html","text":"The join node Join data from two or more nodes, given a list of prefixes, for each row. If the 'field_merge' parameter is given, the node will merge the field given from every in-node, instead of joining. When considering the \"fill\" option, the following rules apply: none - (default) skip rows where a point is missing, inner join. null - fill missing points with null, full outer join. Any numerical value - fill fields with given value, full outer join. Note, that this node will produce a completely new stream. Example def v1 = |value_emitter() .every(3s) .type(point) .align() def v2 = |value_emitter() .every(5s) .type(point) .align() v1 |join(v2) .prefix('v1.joined', 'v2.joined') .tolerance(3s) .missing_timeout(3s) .fill(none) Joins the fields of v1 and v2 and produces a stream, that has the fields v1.joined.val and v2.joined.val Parameters Parameter Description Default prefix( string_list ) list of prefixes (used in join mode) [] field_merge( string ) when given, the join node will do a field merge operation undefined missing_timeout( duration ) values that do not arrive within this timeout will be treated as missing 20s tolerance( duration ) db fieldnames (mapping for faxe fieldname to table field names) fill( 'none' 'null' any ) fill missing values / join behaviour 'none'","title":"Join"},{"location":"nodes/join.html#the-join-node","text":"Join data from two or more nodes, given a list of prefixes, for each row. If the 'field_merge' parameter is given, the node will merge the field given from every in-node, instead of joining. When considering the \"fill\" option, the following rules apply: none - (default) skip rows where a point is missing, inner join. null - fill missing points with null, full outer join. Any numerical value - fill fields with given value, full outer join. Note, that this node will produce a completely new stream.","title":"The join node"},{"location":"nodes/join.html#example","text":"def v1 = |value_emitter() .every(3s) .type(point) .align() def v2 = |value_emitter() .every(5s) .type(point) .align() v1 |join(v2) .prefix('v1.joined', 'v2.joined') .tolerance(3s) .missing_timeout(3s) .fill(none) Joins the fields of v1 and v2 and produces a stream, that has the fields v1.joined.val and v2.joined.val","title":"Example"},{"location":"nodes/join.html#parameters","text":"Parameter Description Default prefix( string_list ) list of prefixes (used in join mode) [] field_merge( string ) when given, the join node will do a field merge operation undefined missing_timeout( duration ) values that do not arrive within this timeout will be treated as missing 20s tolerance( duration ) db fieldnames (mapping for faxe fieldname to table field names) fill( 'none' 'null' any ) fill missing values / join behaviour 'none'","title":"Parameters"},{"location":"nodes/keep.html","text":"The keep node Keep only those fields and tags specified by the parameters. Example |keep() .fields('topic', 'temperature') Parameters Parameter Description Default fields( string_list ) list of fieldnames to keep from the incoming data [] tags( string_list ) list of tagnames to keep from the incoming data []","title":"Keep"},{"location":"nodes/keep.html#the-keep-node","text":"Keep only those fields and tags specified by the parameters.","title":"The keep node"},{"location":"nodes/keep.html#example","text":"|keep() .fields('topic', 'temperature')","title":"Example"},{"location":"nodes/keep.html#parameters","text":"Parameter Description Default fields( string_list ) list of fieldnames to keep from the incoming data [] tags( string_list ) list of tagnames to keep from the incoming data []","title":"Parameters"},{"location":"nodes/log.html","text":"The log node Log incoming data to a file in json format (line by line) Example |log() .file('topics.txt') Parameters Parameter Description Default file( string ) valid writeable filepath","title":"Log"},{"location":"nodes/log.html#the-log-node","text":"Log incoming data to a file in json format (line by line)","title":"The log node"},{"location":"nodes/log.html#example","text":"|log() .file('topics.txt')","title":"Example"},{"location":"nodes/log.html#parameters","text":"Parameter Description Default file( string ) valid writeable filepath","title":"Parameters"},{"location":"nodes/modbus.html","text":"The modbus node Pull data via modbus tcp, supported read functions are : ['coils', 'hregs', 'iregs', 'inputs', 'memory'] Read multiple values with possibly different functions at once If the align property is set, the nodes's read times will be truncated to the every property (For example, if the node is started at 12:06 and the every property is 5m then the next read will occur at 12:10, then the next at 12:15 and so on, instead of 12:06, 12:11 and so on). Example def energy = |modbus() .ip('127.0.0.1') .device(255) .every(1s) .function('coils', 'hregs', 'iregs') .from(2127, 3008, 104) .count(1, 2, 2) .as('Energy.ActiveEnergyConsumption', 'Energy.MaximalCurrentValue', 'Energy.BlindEnergyDelivered') .output('int16', 'float32', 'float32') .signed(true, true, false) Parameters Parameter Description Default ip( string ) ip address of modbus device port( integer ) port of modbus device 502 every( duration ) time between reads 1s align( is_set ) align read intervals according to every false (not set) device( integer ) modbus device id (0-255) 255 function( string_list ) list of read functions, one of ['coils', 'hregs', 'iregs', 'inputs', 'memory'] from( integer_list ) list of start values count( integer_list ) list of count values, how much data to read for every function given as( string_list ) output names for the read values output( string_list ) list of output formats one of ['int16', 'int32', 'float32', 'coils', 'ascii', 'binary'] undefined signed( atom_list true/false) list of values indicating if values are signed undefined Note that, if given, all read parameters( function, from, count, as, output, signed ) must have the same length, this means if you have two values you want to read -> .function('coils', 'hregs') all corresponding read params must have the same length -> .as('val1', 'val2').output(int16, float32).from(1,2).count(2,4).signed(true, true)","title":"Modbus"},{"location":"nodes/modbus.html#the-modbus-node","text":"Pull data via modbus tcp, supported read functions are : ['coils', 'hregs', 'iregs', 'inputs', 'memory'] Read multiple values with possibly different functions at once If the align property is set, the nodes's read times will be truncated to the every property (For example, if the node is started at 12:06 and the every property is 5m then the next read will occur at 12:10, then the next at 12:15 and so on, instead of 12:06, 12:11 and so on).","title":"The modbus node"},{"location":"nodes/modbus.html#example","text":"def energy = |modbus() .ip('127.0.0.1') .device(255) .every(1s) .function('coils', 'hregs', 'iregs') .from(2127, 3008, 104) .count(1, 2, 2) .as('Energy.ActiveEnergyConsumption', 'Energy.MaximalCurrentValue', 'Energy.BlindEnergyDelivered') .output('int16', 'float32', 'float32') .signed(true, true, false)","title":"Example"},{"location":"nodes/modbus.html#parameters","text":"Parameter Description Default ip( string ) ip address of modbus device port( integer ) port of modbus device 502 every( duration ) time between reads 1s align( is_set ) align read intervals according to every false (not set) device( integer ) modbus device id (0-255) 255 function( string_list ) list of read functions, one of ['coils', 'hregs', 'iregs', 'inputs', 'memory'] from( integer_list ) list of start values count( integer_list ) list of count values, how much data to read for every function given as( string_list ) output names for the read values output( string_list ) list of output formats one of ['int16', 'int32', 'float32', 'coils', 'ascii', 'binary'] undefined signed( atom_list true/false) list of values indicating if values are signed undefined Note that, if given, all read parameters( function, from, count, as, output, signed ) must have the same length, this means if you have two values you want to read -> .function('coils', 'hregs') all corresponding read params must have the same length -> .as('val1', 'val2').output(int16, float32).from(1,2).count(2,4).signed(true, true)","title":"Parameters"},{"location":"nodes/mqtt_publish.html","text":"The mqtt_publish node Publish data to an mqtt-broker. Incoming data is converted to JSON before sending. If the save() parameter is given, every message first gets stored to an on-disk queue before sending, this way we can make sure no message gets lost when disconnected from the broker. Example def topic = 'top/track/pressure' def mqtt_host = '101.14.123.23' |mqtt_publish() .host(mqtt_host) .port(1883) .qos(1) .topic(topic) .retained() Parameters Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 1883 topic( string ) mqtt topic to use qos( integer ) Quality of service, one of 0, 1 or 2 1 retained( is_set ) whether the message should be retained on the broker false (not set) save( is_set ) send save (on-disk queuing) false (not set) ssl( is_set ) whether to use ssl false (not set)","title":"Mqtt publish"},{"location":"nodes/mqtt_publish.html#the-mqtt_publish-node","text":"Publish data to an mqtt-broker. Incoming data is converted to JSON before sending. If the save() parameter is given, every message first gets stored to an on-disk queue before sending, this way we can make sure no message gets lost when disconnected from the broker.","title":"The mqtt_publish node"},{"location":"nodes/mqtt_publish.html#example","text":"def topic = 'top/track/pressure' def mqtt_host = '101.14.123.23' |mqtt_publish() .host(mqtt_host) .port(1883) .qos(1) .topic(topic) .retained()","title":"Example"},{"location":"nodes/mqtt_publish.html#parameters","text":"Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 1883 topic( string ) mqtt topic to use qos( integer ) Quality of service, one of 0, 1 or 2 1 retained( is_set ) whether the message should be retained on the broker false (not set) save( is_set ) send save (on-disk queuing) false (not set) ssl( is_set ) whether to use ssl false (not set)","title":"Parameters"},{"location":"nodes/mqtt_subscribe.html","text":"The mqtt_subscribe node Subscribe to an mqtt-broker and get data for a specific topic. Example |mqtt_subscribe() .host('192.168.8.9') .port(1883) .topic('top/grips/#') .dt_field('UTC-Stamp') .dt_format('float_micro') Parameters Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 1883 topic( string ) mqtt topic to use qos( integer ) Quality of service, one of 0, 1 or 2 1 retained( is_set ) whether the message should be retained on the broker false (not set) dt_field( string ) name of the timestamp field that is expected 'ts' dt_format( string ) timestamp or datetime format that is expected (see table below) 'millisecond' ssl( is_set ) whether to use ssl false (not set) Available datetime formats dt_format description example 'millisecond' timestamp UTC in milliseconds 1565343079000 'second' timestamp UTC in seconds 1565343079 'float_micro' timestamp UTC float with microsecond precision 1565343079.173588 'float_millisecond' timestamp UTC float with millisecond precision 1565343079.173 'ISO8601' ISO8601 Datetime format string '2011-10-05T14:48:00.000Z' 'RFC3339' RFC3339 Datetime format string '2018-02-01 15:18:02.088Z' 'convtrack_datetime' special datetime format used in the conveyor tracking data stream '19.08.01 17:33:44,867 '","title":"Mqtt subscribe"},{"location":"nodes/mqtt_subscribe.html#the-mqtt_subscribe-node","text":"Subscribe to an mqtt-broker and get data for a specific topic.","title":"The mqtt_subscribe node"},{"location":"nodes/mqtt_subscribe.html#example","text":"|mqtt_subscribe() .host('192.168.8.9') .port(1883) .topic('top/grips/#') .dt_field('UTC-Stamp') .dt_format('float_micro')","title":"Example"},{"location":"nodes/mqtt_subscribe.html#parameters","text":"Parameter Description Default host( string ) Ip address or hostname of the broker port( integer ) The broker's port 1883 topic( string ) mqtt topic to use qos( integer ) Quality of service, one of 0, 1 or 2 1 retained( is_set ) whether the message should be retained on the broker false (not set) dt_field( string ) name of the timestamp field that is expected 'ts' dt_format( string ) timestamp or datetime format that is expected (see table below) 'millisecond' ssl( is_set ) whether to use ssl false (not set)","title":"Parameters"},{"location":"nodes/mqtt_subscribe.html#available-datetime-formats","text":"dt_format description example 'millisecond' timestamp UTC in milliseconds 1565343079000 'second' timestamp UTC in seconds 1565343079 'float_micro' timestamp UTC float with microsecond precision 1565343079.173588 'float_millisecond' timestamp UTC float with millisecond precision 1565343079.173 'ISO8601' ISO8601 Datetime format string '2011-10-05T14:48:00.000Z' 'RFC3339' RFC3339 Datetime format string '2018-02-01 15:18:02.088Z' 'convtrack_datetime' special datetime format used in the conveyor tracking data stream '19.08.01 17:33:44,867 '","title":"Available datetime formats"},{"location":"nodes/python.html","text":"The python node Rules for python callback classes: Callback class must be in a module with the lowercase name of the class ie: module: \"double\", class: \"Double\" python callback class must be a subclass of the class Faxe from module faxe 'abstract' methods to implement are (note: they are all optional ): options() -> return a list of tuples // static init(self, args ) -> gets the object and a dict with args from options() handle_point(self, point_data) -> point_data is a dict handle_batch(self, batch_data ) -> batch_data is a list of dicts (points) the callbacks need not return anything except for the options method to emit data the method self.emit(data) has to be used, where data is a dict or a list of dicts A custom python node is used with an @ as node sign instead of | in dfs! @my_custom_python_node() Parameters Parameters can be freely defined by the python callback class via the static options() method (See example blow). Note that parameter definition must be in bytes type. Example Callback The example python callback class below defined 2 Parameters: field must be a string and has no default value (so it must be given) as must be a string and has the default value 'double' from faxe import Faxe class Double (Faxe): @staticmethod def options (): opts = [ ( b'field' , b'string' ), ( b'as' , b'string' , b'double' ) ] return opts def init (self, args): self . fieldname = args[ b'field' ] self . asfieldname = args[ b'as' ] print ( \"my args: \" , args) def handle_point (self, point_data): self . emit(self . calc(point_data)) def handle_batch (self, batch_data): out_list = list() for point in batch_data: out_list . append(self . calc(point)) self . emit(out_list) def calc (self, point_dict): point_dict[self . asfieldname] = point_dict[self . fieldname] * 2 return point_dict Use in a dfs script: @double() .field('val') .as('double_val')","title":"Python"},{"location":"nodes/python.html#the-python-node","text":"Rules for python callback classes: Callback class must be in a module with the lowercase name of the class ie: module: \"double\", class: \"Double\" python callback class must be a subclass of the class Faxe from module faxe 'abstract' methods to implement are (note: they are all optional ): options() -> return a list of tuples // static init(self, args ) -> gets the object and a dict with args from options() handle_point(self, point_data) -> point_data is a dict handle_batch(self, batch_data ) -> batch_data is a list of dicts (points) the callbacks need not return anything except for the options method to emit data the method self.emit(data) has to be used, where data is a dict or a list of dicts A custom python node is used with an @ as node sign instead of | in dfs! @my_custom_python_node()","title":"The python node"},{"location":"nodes/python.html#parameters","text":"Parameters can be freely defined by the python callback class via the static options() method (See example blow). Note that parameter definition must be in bytes type.","title":"Parameters"},{"location":"nodes/python.html#example-callback","text":"The example python callback class below defined 2 Parameters: field must be a string and has no default value (so it must be given) as must be a string and has the default value 'double' from faxe import Faxe class Double (Faxe): @staticmethod def options (): opts = [ ( b'field' , b'string' ), ( b'as' , b'string' , b'double' ) ] return opts def init (self, args): self . fieldname = args[ b'field' ] self . asfieldname = args[ b'as' ] print ( \"my args: \" , args) def handle_point (self, point_data): self . emit(self . calc(point_data)) def handle_batch (self, batch_data): out_list = list() for point in batch_data: out_list . append(self . calc(point)) self . emit(out_list) def calc (self, point_dict): point_dict[self . asfieldname] = point_dict[self . fieldname] * 2 return point_dict Use in a dfs script: @double() .field('val') .as('double_val')","title":"Example Callback"},{"location":"nodes/rename.html","text":"The rename node Rename existing fields and/or tags. Example |rename() .fields('topic', 'temperature') .as_fields('cipot', 'mean_temp') Parameters Parameter Description Default fields( string_list ) list of fieldnames to rename [] as_fields( string_list ) list of new fieldnames for renaming [] tags( string_list ) list of tagnames to rename [] as_tags( string_list ) list of new tagnames for renaming []","title":"Rename"},{"location":"nodes/rename.html#the-rename-node","text":"Rename existing fields and/or tags.","title":"The rename node"},{"location":"nodes/rename.html#example","text":"|rename() .fields('topic', 'temperature') .as_fields('cipot', 'mean_temp')","title":"Example"},{"location":"nodes/rename.html#parameters","text":"Parameter Description Default fields( string_list ) list of fieldnames to rename [] as_fields( string_list ) list of new fieldnames for renaming [] tags( string_list ) list of tagnames to rename [] as_tags( string_list ) list of new tagnames for renaming []","title":"Parameters"},{"location":"nodes/s7poll.html","text":"The s7poll node Periodically pull data from a siemens s7 plc via the snap7 library using the iso on tcp protocol . Data addressing can be done in a Step7 schema or with a sligthly different schema used in node-red (although the step7 variant is preferred). See table below for more information. Note: max 19 values can be read with one s7poll node at the moment. Example |s7poll() .ip(10.10.204.15) .port(102) .rack(0) .slot(2) .every(3s) .vars( 'DB1140.DBX4.0', 'DB1140.DBX4.1', 'DB1140.DBX4.4', 'DB1140.DBX4.5' ) .as( 'data.tbo[1].ix_OcM1', 'data.tbo[1].ix_OcM2', 'data.tbo[1].ix_Lift_PosTop', 'data.tbo[1].ix_Lift_PosBo' ) Read 4 values (BOOL in this case) from a plc every 3 seconds and name them with a deep json path. Parameters Parameter Description Default ip( string ) ip address of plc port( integer ) port of modbus device 102 every( duration ) time between reads 1s align( is_set ) align read intervals according to every false (not set) slot( integer ) plc slot number 0 rack( integer ) plc rack number 0 vars( string_list ) list of s7 addresses ie: 'DB3.DBX2.5' (see table below) as( string_list ) output names for the read values diff( is_set ) when given, only output values different to previous values false (not set) Note that params vars and as must have the same length. Data addressing Note: Step7 style preferred and should be used ! Address Step7 equivalent JS Data type Description DB5,X0.1 DB5.DBX0.1 Boolean Bit 1 of byte 0 of DB 5 DB23,B1 or DB23,BYTE1 DB23.DBB1 Number Byte 1 (0-255) of DB 23 DB100,C2 or DB100,CHAR2 DB100.DBB2 String Byte 2 of DB 100 as a Char DB42,I3 or DB42,INT3 DB42.DBW3 Number Signed 16-bit number at byte 3 of DB 42 DB57,WORD4 DB57.DBW4 Number Unsigned 16-bit number at byte 4 of DB 57 DB13,DI5 or DB13,DINT5 DB13.DBD5 Number Signed 32-bit number at byte 5 of DB 13 DB19,DW6 or DB19,DWORD6 DB19.DBD6 Number Unsigned 32-bit number at byte 6 of DB 19 DB21,DR7 or DB21,REAL7 DB19.DBD6 Number Floating point 32-bit number at byte 7 of DB 21 DB2,S7.10* - String String of length 10 starting at byte 7 of DB 2 I1.0 or E1.0 I1.0 or E1.0 Boolean Bit 0 of byte 1 of input area Q2.1 or A2.1 Q2.1 or A2.1 Boolean Bit 1 of byte 2 of output area M3.2 QM3.2 Boolean Bit 2 of byte 3 of memory area IB4 or EB4 IB4 or EB4 Number Byte 4 (0 -255) of input area QB5 or AB5 QB5 or AB5 Number Byte 5 (0 -255) of output area MB6 MB6 Number Byte 6 (0 -255) of memory area IC7 or EC7 IB7 or EB7 String Byte 7 of input area as a Char QC8 or AC8 QB8 or AB8 String Byte 8 of output area as a Char MC9 MB9 String Byte 9 of memory area as a Char II10 or EI10 IW10 or EW10 Number Signed 16-bit number at byte 10 of input area QI12 or AI12 QW12 or AW12 Number Signed 16-bit number at byte 12 of output area MI14 MW14 Number Signed 16-bit number at byte 14 of memory area IW16 or EW16 IW16 or EW16 Number Unsigned 16-bit number at byte 16 of input area QW18 or AW18 QW18 or AW18 Number Unsigned 16-bit number at byte 18 of output area MW20 MW20 Number Unsigned 16-bit number at byte 20 of memory area IDI22 or EDI22 ID22 or ED22 Number Signed 32-bit number at byte 22 of input area QDI24 or ADI24 QD24 or AD24 Number Signed 32-bit number at byte 24 of output area MDI26 MD26 Number Signed 32-bit number at byte 26 of memory area ID28 or ED28 ID28 or ED28 Number Unsigned 32-bit number at byte 28 of input area QD30 or AD30 QD30 or AD30 Number Unsigned 32-bit number at byte 30 of output area MD32 MD32 Number Unsigned 32-bit number at byte 32 of memory area IR34 or ER34 IR34 or ER34 Number Floating point 32-bit number at byte 34 of input area QR36 or AR36 QR36 or AR36 Number Floating point 32-bit number at byte 36 of output area MR38 MR38 Number Floating point 32-bit number at byte 38 of memory area","title":"S7poll"},{"location":"nodes/s7poll.html#the-s7poll-node","text":"Periodically pull data from a siemens s7 plc via the snap7 library using the iso on tcp protocol . Data addressing can be done in a Step7 schema or with a sligthly different schema used in node-red (although the step7 variant is preferred). See table below for more information. Note: max 19 values can be read with one s7poll node at the moment.","title":"The s7poll node"},{"location":"nodes/s7poll.html#example","text":"|s7poll() .ip(10.10.204.15) .port(102) .rack(0) .slot(2) .every(3s) .vars( 'DB1140.DBX4.0', 'DB1140.DBX4.1', 'DB1140.DBX4.4', 'DB1140.DBX4.5' ) .as( 'data.tbo[1].ix_OcM1', 'data.tbo[1].ix_OcM2', 'data.tbo[1].ix_Lift_PosTop', 'data.tbo[1].ix_Lift_PosBo' ) Read 4 values (BOOL in this case) from a plc every 3 seconds and name them with a deep json path.","title":"Example"},{"location":"nodes/s7poll.html#parameters","text":"Parameter Description Default ip( string ) ip address of plc port( integer ) port of modbus device 102 every( duration ) time between reads 1s align( is_set ) align read intervals according to every false (not set) slot( integer ) plc slot number 0 rack( integer ) plc rack number 0 vars( string_list ) list of s7 addresses ie: 'DB3.DBX2.5' (see table below) as( string_list ) output names for the read values diff( is_set ) when given, only output values different to previous values false (not set) Note that params vars and as must have the same length.","title":"Parameters"},{"location":"nodes/s7poll.html#data-addressing","text":"Note: Step7 style preferred and should be used ! Address Step7 equivalent JS Data type Description DB5,X0.1 DB5.DBX0.1 Boolean Bit 1 of byte 0 of DB 5 DB23,B1 or DB23,BYTE1 DB23.DBB1 Number Byte 1 (0-255) of DB 23 DB100,C2 or DB100,CHAR2 DB100.DBB2 String Byte 2 of DB 100 as a Char DB42,I3 or DB42,INT3 DB42.DBW3 Number Signed 16-bit number at byte 3 of DB 42 DB57,WORD4 DB57.DBW4 Number Unsigned 16-bit number at byte 4 of DB 57 DB13,DI5 or DB13,DINT5 DB13.DBD5 Number Signed 32-bit number at byte 5 of DB 13 DB19,DW6 or DB19,DWORD6 DB19.DBD6 Number Unsigned 32-bit number at byte 6 of DB 19 DB21,DR7 or DB21,REAL7 DB19.DBD6 Number Floating point 32-bit number at byte 7 of DB 21 DB2,S7.10* - String String of length 10 starting at byte 7 of DB 2 I1.0 or E1.0 I1.0 or E1.0 Boolean Bit 0 of byte 1 of input area Q2.1 or A2.1 Q2.1 or A2.1 Boolean Bit 1 of byte 2 of output area M3.2 QM3.2 Boolean Bit 2 of byte 3 of memory area IB4 or EB4 IB4 or EB4 Number Byte 4 (0 -255) of input area QB5 or AB5 QB5 or AB5 Number Byte 5 (0 -255) of output area MB6 MB6 Number Byte 6 (0 -255) of memory area IC7 or EC7 IB7 or EB7 String Byte 7 of input area as a Char QC8 or AC8 QB8 or AB8 String Byte 8 of output area as a Char MC9 MB9 String Byte 9 of memory area as a Char II10 or EI10 IW10 or EW10 Number Signed 16-bit number at byte 10 of input area QI12 or AI12 QW12 or AW12 Number Signed 16-bit number at byte 12 of output area MI14 MW14 Number Signed 16-bit number at byte 14 of memory area IW16 or EW16 IW16 or EW16 Number Unsigned 16-bit number at byte 16 of input area QW18 or AW18 QW18 or AW18 Number Unsigned 16-bit number at byte 18 of output area MW20 MW20 Number Unsigned 16-bit number at byte 20 of memory area IDI22 or EDI22 ID22 or ED22 Number Signed 32-bit number at byte 22 of input area QDI24 or ADI24 QD24 or AD24 Number Signed 32-bit number at byte 24 of output area MDI26 MD26 Number Signed 32-bit number at byte 26 of memory area ID28 or ED28 ID28 or ED28 Number Unsigned 32-bit number at byte 28 of input area QD30 or AD30 QD30 or AD30 Number Unsigned 32-bit number at byte 30 of output area MD32 MD32 Number Unsigned 32-bit number at byte 32 of memory area IR34 or ER34 IR34 or ER34 Number Floating point 32-bit number at byte 34 of input area QR36 or AR36 QR36 or AR36 Number Floating point 32-bit number at byte 36 of output area MR38 MR38 Number Floating point 32-bit number at byte 38 of memory area","title":"Data addressing"},{"location":"nodes/sample.html","text":"The sample node Samples the incoming points or batches. One point will be emitted every count ~~or duration~~ specified. Note: time based sampling is not supported with this version Example |sample(5) Keep every 5th data_point or data_batch. ~~|sample(10s)~~ ~~Keep every point or batch, that falls in a 10 second interval.~~ Parameters Parameter Description Default node-param rate ( integer duration ) sample rate","title":"Sample"},{"location":"nodes/sample.html#the-sample-node","text":"Samples the incoming points or batches. One point will be emitted every count ~~or duration~~ specified. Note: time based sampling is not supported with this version","title":"The sample node"},{"location":"nodes/sample.html#example","text":"|sample(5) Keep every 5th data_point or data_batch. ~~|sample(10s)~~ ~~Keep every point or batch, that falls in a 10 second interval.~~","title":"Example"},{"location":"nodes/sample.html#parameters","text":"Parameter Description Default node-param rate ( integer duration ) sample rate","title":"Parameters"},{"location":"nodes/shift.html","text":"The shift node The shift node shifts points and batches in time. This is useful for comparing batches or points from different times. Example |shift(5m) Shift all data point 5m forward in time. |shift(-10s) Shift all data points 10s backwards in time. Parameters Parameter Description Default node-param offset ( duration ) time offset","title":"Shift"},{"location":"nodes/shift.html#the-shift-node","text":"The shift node shifts points and batches in time. This is useful for comparing batches or points from different times.","title":"The shift node"},{"location":"nodes/shift.html#example","text":"|shift(5m) Shift all data point 5m forward in time. |shift(-10s) Shift all data points 10s backwards in time.","title":"Example"},{"location":"nodes/shift.html#parameters","text":"Parameter Description Default node-param offset ( duration ) time offset","title":"Parameters"},{"location":"nodes/state_count.html","text":"The state_count node Computes the number of consecutive points in a given state. The state is defined via a lambda expression. For each consecutive point for which the expression evaluates as true, the state count will be incremented. When a point evaluates to false, the state count is reset. The state count will be added as an additional int field to each point. If the expression evaluates to false, the value will be -1. If the expression generates an error during evaluation, the point is discarded and does not affect the state count. Example |state_count() .lambda(lambda: \"val\" < 7) .as('val_below_7') Counts the number of consecutive points which have the value of the val field below 7 . Parameters Parameter Description Default lambda( lambda ) state lambda expression as( string ) name for the added count field 'state_count'","title":"State count"},{"location":"nodes/state_count.html#the-state_count-node","text":"Computes the number of consecutive points in a given state. The state is defined via a lambda expression. For each consecutive point for which the expression evaluates as true, the state count will be incremented. When a point evaluates to false, the state count is reset. The state count will be added as an additional int field to each point. If the expression evaluates to false, the value will be -1. If the expression generates an error during evaluation, the point is discarded and does not affect the state count.","title":"The state_count node"},{"location":"nodes/state_count.html#example","text":"|state_count() .lambda(lambda: \"val\" < 7) .as('val_below_7') Counts the number of consecutive points which have the value of the val field below 7 .","title":"Example"},{"location":"nodes/state_count.html#parameters","text":"Parameter Description Default lambda( lambda ) state lambda expression as( string ) name for the added count field 'state_count'","title":"Parameters"},{"location":"nodes/state_duration.html","text":"The state_duration node Computes the duration of a given state. The state is defined via a lambda expression. For each consecutive point for which the lambda expression evaluates as true, the state duration will be incremented by the duration between points. When a point evaluates as false, the state duration is reset. The state duration will be added as an additional field to each point and it's unit is milliseconds . If the expression evaluates to false, the value will be -1. When the lambda expression generates an error during evaluation, the point is discarded and does not affect the state duration.. Example |state_duration() .lambda(lambda: \"val\" < 7) Parameters Parameter Description Default lambda( lambda ) state lambda expression as( string ) name for the added duration field 'state_duration'","title":"State duration"},{"location":"nodes/state_duration.html#the-state_duration-node","text":"Computes the duration of a given state. The state is defined via a lambda expression. For each consecutive point for which the lambda expression evaluates as true, the state duration will be incremented by the duration between points. When a point evaluates as false, the state duration is reset. The state duration will be added as an additional field to each point and it's unit is milliseconds . If the expression evaluates to false, the value will be -1. When the lambda expression generates an error during evaluation, the point is discarded and does not affect the state duration..","title":"The state_duration node"},{"location":"nodes/state_duration.html#example","text":"|state_duration() .lambda(lambda: \"val\" < 7)","title":"Example"},{"location":"nodes/state_duration.html#parameters","text":"Parameter Description Default lambda( lambda ) state lambda expression as( string ) name for the added duration field 'state_duration'","title":"Parameters"},{"location":"nodes/stats.html","text":"The stats node The stats node lets you compute statistical functions on data_points and data_batches. see nodes under Statistics for more info Parameters All statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Stats"},{"location":"nodes/stats.html#the-stats-node","text":"The stats node lets you compute statistical functions on data_points and data_batches. see nodes under Statistics for more info","title":"The stats node"},{"location":"nodes/stats.html#parameters","text":"All statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/tcp_receive.html","text":"The tcp_receive node This node connects to a tcp endpoint and awaits data in a special format, which is defined by the parser parameter. The parser will then try to convert the data to faxe's internal format and emit the result. At the moment tcp messages must start with a 2 byte header denoting the length of the following data. `Length_Header:16/integer, Data:{Length_Header}/binary` If the changed option is given, the node will only emit on changed values (crc32 checksum comparison). The tcp listener is protected against flooding with the {active, once} inet option. Example def parser = 'parser_robot_plc_v1' |tcp_recv() .ip(212.14.149.8) .port(9715) .parser(parser) .as('data') Parameters Parameter Description Default ip( string ) ip or hostname for the tcp peer port( integer ) port number parser( string ) name of parser to use for data conversion, see table below as( string ) name of the field for parsed data changed( is_set ) whether to check for changed data false (not set) Available Parsers Parser name Description parser_robot_plc_v1 parses the special robotplc binary data format parser_conv_tracking_v1 parser for the conveyor tracking ascii-protocol","title":"Tcp receive"},{"location":"nodes/tcp_receive.html#the-tcp_receive-node","text":"This node connects to a tcp endpoint and awaits data in a special format, which is defined by the parser parameter. The parser will then try to convert the data to faxe's internal format and emit the result. At the moment tcp messages must start with a 2 byte header denoting the length of the following data. `Length_Header:16/integer, Data:{Length_Header}/binary` If the changed option is given, the node will only emit on changed values (crc32 checksum comparison). The tcp listener is protected against flooding with the {active, once} inet option.","title":"The tcp_receive node"},{"location":"nodes/tcp_receive.html#example","text":"def parser = 'parser_robot_plc_v1' |tcp_recv() .ip(212.14.149.8) .port(9715) .parser(parser) .as('data')","title":"Example"},{"location":"nodes/tcp_receive.html#parameters","text":"Parameter Description Default ip( string ) ip or hostname for the tcp peer port( integer ) port number parser( string ) name of parser to use for data conversion, see table below as( string ) name of the field for parsed data changed( is_set ) whether to check for changed data false (not set)","title":"Parameters"},{"location":"nodes/tcp_receive.html#available-parsers","text":"Parser name Description parser_robot_plc_v1 parses the special robotplc binary data format parser_conv_tracking_v1 parser for the conveyor tracking ascii-protocol","title":"Available Parsers"},{"location":"nodes/tcp_receive_line.html","text":"The tcp_receive_line node This node connects to a tcp endpoint and awaits data in a line separated special format, which is defined by the parser parameter. The parser will then try to convert the data to faxe's internal format and emit the result. At the moment the line separator is fixed to \\n . If the changed option is given, the node will only emit on changed values (crc32 checksum comparison). The tcp listener is protected against flooding with the {active, once} inet option. Example def parser = 'parser_conv_tracking_v1' |tcp_recv_line() .ip(212.14.149.3) .port(2004) .parser(parser) .as('data') Parameters Parameter Description Default ip( string ) ip or hostname for the tcp peer port( integer ) port number parser( string ) name of parser to use for data conversion, see table below as( string ) name of the field for parsed data changed( is_set ) whether to check for changed data false (not set) min_length( integer) lines shorter than min_length bytes will be ignored 61 Available Parsers Parser name Description parser_robot_plc_v1 parses the special robotplc binary data format parser_conv_tracking_v1 parser for the conveyor tracking ascii-protocol","title":"Tcp receive line"},{"location":"nodes/tcp_receive_line.html#the-tcp_receive_line-node","text":"This node connects to a tcp endpoint and awaits data in a line separated special format, which is defined by the parser parameter. The parser will then try to convert the data to faxe's internal format and emit the result. At the moment the line separator is fixed to \\n . If the changed option is given, the node will only emit on changed values (crc32 checksum comparison). The tcp listener is protected against flooding with the {active, once} inet option.","title":"The tcp_receive_line node"},{"location":"nodes/tcp_receive_line.html#example","text":"def parser = 'parser_conv_tracking_v1' |tcp_recv_line() .ip(212.14.149.3) .port(2004) .parser(parser) .as('data')","title":"Example"},{"location":"nodes/tcp_receive_line.html#parameters","text":"Parameter Description Default ip( string ) ip or hostname for the tcp peer port( integer ) port number parser( string ) name of parser to use for data conversion, see table below as( string ) name of the field for parsed data changed( is_set ) whether to check for changed data false (not set) min_length( integer) lines shorter than min_length bytes will be ignored 61","title":"Parameters"},{"location":"nodes/tcp_receive_line.html#available-parsers","text":"Parser name Description parser_robot_plc_v1 parses the special robotplc binary data format parser_conv_tracking_v1 parser for the conveyor tracking ascii-protocol","title":"Available Parsers"},{"location":"nodes/time_diff.html","text":"The time_diff node The time_diff node adds a field to the current data-item containing the difference between the timestamps of the consecutive items. Note that the difference in time will be calculated from the data-points timestamp fields and does not reflect the difference in time points coming into the node. For the other behaviour see time_elapsed . The unit for output values is milliseconds. Example |time_diff() .as('time_diff') Parameters Parameter Description Default as( string ) name of the field for parsed data 'timediff'","title":"Time diff"},{"location":"nodes/time_diff.html#the-time_diff-node","text":"The time_diff node adds a field to the current data-item containing the difference between the timestamps of the consecutive items. Note that the difference in time will be calculated from the data-points timestamp fields and does not reflect the difference in time points coming into the node. For the other behaviour see time_elapsed . The unit for output values is milliseconds.","title":"The time_diff node"},{"location":"nodes/time_diff.html#example","text":"|time_diff() .as('time_diff')","title":"Example"},{"location":"nodes/time_diff.html#parameters","text":"Parameter Description Default as( string ) name of the field for parsed data 'timediff'","title":"Parameters"},{"location":"nodes/time_elapsed.html","text":"The time_elapsed node The time_elapsed node adds a field to the current data-item containing the difference in arrival time of consecutive items. See the time_diff node . The unit for output values is milliseconds. Example |time_elapsed() .as('time_dur') Parameters Parameter Description Default as( string ) name of the field for parsed data 'elapsed'","title":"Time elapsed"},{"location":"nodes/time_elapsed.html#the-time_elapsed-node","text":"The time_elapsed node adds a field to the current data-item containing the difference in arrival time of consecutive items. See the time_diff node . The unit for output values is milliseconds.","title":"The time_elapsed node"},{"location":"nodes/time_elapsed.html#example","text":"|time_elapsed() .as('time_dur')","title":"Example"},{"location":"nodes/time_elapsed.html#parameters","text":"Parameter Description Default as( string ) name of the field for parsed data 'elapsed'","title":"Parameters"},{"location":"nodes/value_emitter.html","text":"The value_emitter node This node is for debugging purposes. It periodically emits random values. Example |value_emitter() .every(1s) .type(point) Emit a data_point with a random value in field val every second. Parameters Parameter Description Default every( duration ) emit interval 5s jitter( duration ) add time jitter to the values produced 0ms type( atom ) emit point or batch batch fields( string_list ) what fields to emit ['val'] format( atom ) the format of the fields emitted flat/ejson flat align( is_set ) align the time to the every param false (not set)","title":"Value emitter"},{"location":"nodes/value_emitter.html#the-value_emitter-node","text":"This node is for debugging purposes. It periodically emits random values.","title":"The value_emitter node"},{"location":"nodes/value_emitter.html#example","text":"|value_emitter() .every(1s) .type(point) Emit a data_point with a random value in field val every second.","title":"Example"},{"location":"nodes/value_emitter.html#parameters","text":"Parameter Description Default every( duration ) emit interval 5s jitter( duration ) add time jitter to the values produced 0ms type( atom ) emit point or batch batch fields( string_list ) what fields to emit ['val'] format( atom ) the format of the fields emitted flat/ejson flat align( is_set ) align the time to the every param false (not set)","title":"Parameters"},{"location":"nodes/where.html","text":"The where node Filter points and batches with a lambda expression, which returns a boolean value. Data-items for which the lambda expression evaluates as false will be discarded. Example |where() lambda(lambda: hour(\"ts\") < 18 AND hour(\"ts\") > 8) Filters points who's timestamp is not between 09:00 and 17:00. Parameters Parameter Description Default lambda( lambda ) The lambda filter expression","title":"Where"},{"location":"nodes/where.html#the-where-node","text":"Filter points and batches with a lambda expression, which returns a boolean value. Data-items for which the lambda expression evaluates as false will be discarded.","title":"The where node"},{"location":"nodes/where.html#example","text":"|where() lambda(lambda: hour(\"ts\") < 18 AND hour(\"ts\") > 8) Filters points who's timestamp is not between 09:00 and 17:00.","title":"Example"},{"location":"nodes/where.html#parameters","text":"Parameter Description Default lambda( lambda ) The lambda filter expression","title":"Parameters"},{"location":"nodes/win_clock.html","text":"The win_clock node A window node is for batching data_points. This window-type has wall-clock timing, timestamps contained in incoming events are not relevant here. When the align option is true, window boundaries are aligned according to the every option, this means when every is 5s and an event comes into the window at time 15:03:27, this event will be member of the window that starts at 15:03:25, otherwise the window would start at 15:03:27. By default, the boundries are defined relative to the first data point the window node receives. With fill_period given, the window will not emit before \"period\" time has elapsed (for the first time). This only applies if the period is greater than the every value. Example |win_clock() .every(5s) .period(15s) .fill_period() .align() The window will emit every 5 seconds, but only after initially 15 seconds have passed (due to fill_period ), it has its boundaries aligned to 5 second intervals. Parameters Parameter Description Default period( duration ) Window length defaults to every every( duration ) Output window contents every align( is_set ) Align the window boundaries false (not set) fill_period( is_set ) Window output only when period time has elapsed false (not set)","title":"Win clock"},{"location":"nodes/win_clock.html#the-win_clock-node","text":"A window node is for batching data_points. This window-type has wall-clock timing, timestamps contained in incoming events are not relevant here. When the align option is true, window boundaries are aligned according to the every option, this means when every is 5s and an event comes into the window at time 15:03:27, this event will be member of the window that starts at 15:03:25, otherwise the window would start at 15:03:27. By default, the boundries are defined relative to the first data point the window node receives. With fill_period given, the window will not emit before \"period\" time has elapsed (for the first time). This only applies if the period is greater than the every value.","title":"The win_clock node"},{"location":"nodes/win_clock.html#example","text":"|win_clock() .every(5s) .period(15s) .fill_period() .align() The window will emit every 5 seconds, but only after initially 15 seconds have passed (due to fill_period ), it has its boundaries aligned to 5 second intervals.","title":"Example"},{"location":"nodes/win_clock.html#parameters","text":"Parameter Description Default period( duration ) Window length defaults to every every( duration ) Output window contents every align( is_set ) Align the window boundaries false (not set) fill_period( is_set ) Window output only when period time has elapsed false (not set)","title":"Parameters"},{"location":"nodes/win_event.html","text":"The win_event node A window node is for batching data_points. This window holds period number of data_points and emits every every incoming point. With fill_period given, the window will only emit when it is filled with period points. This only applies if the period is greater than the every value. Examples |win_event() .every(5) .period(15) .fill_period() The window will emit it's contents every 5 incoming points, but only after the window is filled with 15 points. |win_event() .every(5) .period(15) The window will emit it's contents every 5 incoming points. On first emit 5 points will be outputted, on the second emit 10 points will be emitted. From the third emit onwards, the window will output 15 points. Starting with the 4th emit, the window will output 15 data_points - with 10 old and 5 new points (Tumbling window). Parameters Parameter Description Default period( integer ) Window length, number of points defaults to every every( integer ) Output window contents every n incoming points fill_period( is_set ) Output only when window is filled false (not set)","title":"Win event"},{"location":"nodes/win_event.html#the-win_event-node","text":"A window node is for batching data_points. This window holds period number of data_points and emits every every incoming point. With fill_period given, the window will only emit when it is filled with period points. This only applies if the period is greater than the every value.","title":"The win_event node"},{"location":"nodes/win_event.html#examples","text":"|win_event() .every(5) .period(15) .fill_period() The window will emit it's contents every 5 incoming points, but only after the window is filled with 15 points. |win_event() .every(5) .period(15) The window will emit it's contents every 5 incoming points. On first emit 5 points will be outputted, on the second emit 10 points will be emitted. From the third emit onwards, the window will output 15 points. Starting with the 4th emit, the window will output 15 data_points - with 10 old and 5 new points (Tumbling window).","title":"Examples"},{"location":"nodes/win_event.html#parameters","text":"Parameter Description Default period( integer ) Window length, number of points defaults to every every( integer ) Output window contents every n incoming points fill_period( is_set ) Output only when window is filled false (not set)","title":"Parameters"},{"location":"nodes/win_time.html","text":"The win_time node A window node is for batching data_points. This window refers it's timing to the timestamp contained in the incoming data-items. With fill_period given, the window will not emit before \"period\" time has elapsed (for the first time). Note that, since this window type does not rely on wall clock, but on the points timestamps, it is possible that no data is emitted, if there are no new points coming in. Example |win_time() .every(5s) .period(15s) The window will emit it's contents every 5 seconds. |win_time() .every(1m) Period is 1 minute here (period defaults to every) Parameters Parameter Description Default period( duration ) Window length defaults to every every( duration ) Output window contents every fill_period( is_set ) Window output only when period time has accumulated false (not set)","title":"Win time"},{"location":"nodes/win_time.html#the-win_time-node","text":"A window node is for batching data_points. This window refers it's timing to the timestamp contained in the incoming data-items. With fill_period given, the window will not emit before \"period\" time has elapsed (for the first time). Note that, since this window type does not rely on wall clock, but on the points timestamps, it is possible that no data is emitted, if there are no new points coming in.","title":"The win_time node"},{"location":"nodes/win_time.html#example","text":"|win_time() .every(5s) .period(15s) The window will emit it's contents every 5 seconds. |win_time() .every(1m) Period is 1 minute here (period defaults to every)","title":"Example"},{"location":"nodes/win_time.html#parameters","text":"Parameter Description Default period( duration ) Window length defaults to every every( duration ) Output window contents every fill_period( is_set ) Window output only when period time has accumulated false (not set)","title":"Parameters"},{"location":"nodes/statistics/avg.html","text":"The avg node Compute the average. See the stats node Example |avg() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Avg"},{"location":"nodes/statistics/avg.html#the-avg-node","text":"Compute the average. See the stats node","title":"The avg node"},{"location":"nodes/statistics/avg.html#example","text":"|avg() .field('temperature')","title":"Example"},{"location":"nodes/statistics/avg.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/bottom.html","text":"The sum node Select the bottom num points for field. See the stats node Example |bottom() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node num( integer ) number of points to select 1","title":"Bottom"},{"location":"nodes/statistics/bottom.html#the-sum-node","text":"Select the bottom num points for field. See the stats node","title":"The sum node"},{"location":"nodes/statistics/bottom.html#example","text":"|bottom() .field('temperature')","title":"Example"},{"location":"nodes/statistics/bottom.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node num( integer ) number of points to select 1","title":"Parameters"},{"location":"nodes/statistics/count.html","text":"The count node Count the number of points. See the stats node Example |count() .field('over_ts') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Count"},{"location":"nodes/statistics/count.html#the-count-node","text":"Count the number of points. See the stats node","title":"The count node"},{"location":"nodes/statistics/count.html#example","text":"|count() .field('over_ts')","title":"Example"},{"location":"nodes/statistics/count.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/distinct.html","text":"The distinct node Select unique values. See the stats node Example |distinct() .field('status') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Distinct"},{"location":"nodes/statistics/distinct.html#the-distinct-node","text":"Select unique values. See the stats node","title":"The distinct node"},{"location":"nodes/statistics/distinct.html#example","text":"|distinct() .field('status')","title":"Example"},{"location":"nodes/statistics/distinct.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/elapsed.html","text":"The elapsed node Compute the elapsed time between points. See the stats node Example |elapsed() .field('trigger') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Elapsed"},{"location":"nodes/statistics/elapsed.html#the-elapsed-node","text":"Compute the elapsed time between points. See the stats node","title":"The elapsed node"},{"location":"nodes/statistics/elapsed.html#example","text":"|elapsed() .field('trigger')","title":"Example"},{"location":"nodes/statistics/elapsed.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/first.html","text":"The first node Select the first that means the oldest point. See the stats node Example |first() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"First"},{"location":"nodes/statistics/first.html#the-first-node","text":"Select the first that means the oldest point. See the stats node","title":"The first node"},{"location":"nodes/statistics/first.html#example","text":"|first() .field('temperature')","title":"Example"},{"location":"nodes/statistics/first.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/geometric_mean.html","text":"The geometric_mean node Compute the geometric_mean. See the stats node Example |geometric_mean() .field('pressure') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Geometric mean"},{"location":"nodes/statistics/geometric_mean.html#the-geometric_mean-node","text":"Compute the geometric_mean. See the stats node","title":"The geometric_mean node"},{"location":"nodes/statistics/geometric_mean.html#example","text":"|geometric_mean() .field('pressure')","title":"Example"},{"location":"nodes/statistics/geometric_mean.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/kurtosis.html","text":"The kurtosis node Compute the kurtosis of data. See the stats node Example |kurtosis() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Kurtosis"},{"location":"nodes/statistics/kurtosis.html#the-kurtosis-node","text":"Compute the kurtosis of data. See the stats node","title":"The kurtosis node"},{"location":"nodes/statistics/kurtosis.html#example","text":"|kurtosis() .field('temperature')","title":"Example"},{"location":"nodes/statistics/kurtosis.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/last.html","text":"The last node Select the last, that means the newest point. See the stats node Example |last() .field('chair') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Last"},{"location":"nodes/statistics/last.html#the-last-node","text":"Select the last, that means the newest point. See the stats node","title":"The last node"},{"location":"nodes/statistics/last.html#example","text":"|last() .field('chair')","title":"Example"},{"location":"nodes/statistics/last.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/max.html","text":"The max node Compute the maximum value. See the stats node Example |max() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Max"},{"location":"nodes/statistics/max.html#the-max-node","text":"Compute the maximum value. See the stats node","title":"The max node"},{"location":"nodes/statistics/max.html#example","text":"|max() .field('temperature')","title":"Example"},{"location":"nodes/statistics/max.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/mean.html","text":"The mean node Compute the mean of data. See the stats node Example |mean() .field('current') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Mean"},{"location":"nodes/statistics/mean.html#the-mean-node","text":"Compute the mean of data. See the stats node","title":"The mean node"},{"location":"nodes/statistics/mean.html#example","text":"|mean() .field('current')","title":"Example"},{"location":"nodes/statistics/mean.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/median.html","text":"The median node Compute the median of data. See the stats node Example |median() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Median"},{"location":"nodes/statistics/median.html#the-median-node","text":"Compute the median of data. See the stats node","title":"The median node"},{"location":"nodes/statistics/median.html#example","text":"|median() .field('temperature')","title":"Example"},{"location":"nodes/statistics/median.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/min.html","text":"The min node Compute the minimum of data. See the stats node Example |min() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Min"},{"location":"nodes/statistics/min.html#the-min-node","text":"Compute the minimum of data. See the stats node","title":"The min node"},{"location":"nodes/statistics/min.html#example","text":"|min() .field('temperature')","title":"Example"},{"location":"nodes/statistics/min.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/percentile.html","text":"The percentile node Select a point at the given percentile. This is a selector function, no interpolation between points is performed. See the stats node Example |percentile() .perc(95) .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node perc ( integer ) select percentile 95","title":"Percentile"},{"location":"nodes/statistics/percentile.html#the-percentile-node","text":"Select a point at the given percentile. This is a selector function, no interpolation between points is performed. See the stats node","title":"The percentile node"},{"location":"nodes/statistics/percentile.html#example","text":"|percentile() .perc(95) .field('temperature')","title":"Example"},{"location":"nodes/statistics/percentile.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node perc ( integer ) select percentile 95","title":"Parameters"},{"location":"nodes/statistics/stddev.html","text":"The stddev node Compute the standard deviation of the data. See the stats node Example |stddev() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Stddev"},{"location":"nodes/statistics/stddev.html#the-stddev-node","text":"Compute the standard deviation of the data. See the stats node","title":"The stddev node"},{"location":"nodes/statistics/stddev.html#example","text":"|stddev() .field('temperature')","title":"Example"},{"location":"nodes/statistics/stddev.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/sum.html","text":"The sum node Compute the sum of data. See the stats node Example |sum() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Sum"},{"location":"nodes/statistics/sum.html#the-sum-node","text":"Compute the sum of data. See the stats node","title":"The sum node"},{"location":"nodes/statistics/sum.html#example","text":"|sum() .field('temperature')","title":"Example"},{"location":"nodes/statistics/sum.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"},{"location":"nodes/statistics/top.html","text":"The top node Select the top num points. See the stats node Example |sum() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node num( integer ) number of points to select 1","title":"Top"},{"location":"nodes/statistics/top.html#the-top-node","text":"Select the top num points. See the stats node","title":"The top node"},{"location":"nodes/statistics/top.html#example","text":"|sum() .field('temperature')","title":"Example"},{"location":"nodes/statistics/top.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node num( integer ) number of points to select 1","title":"Parameters"},{"location":"nodes/statistics/variance.html","text":"The variance node Compute the data's variance. See the stats node Example |variance() .field('temperature') Parameters all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Variance"},{"location":"nodes/statistics/variance.html#the-variance-node","text":"Compute the data's variance. See the stats node","title":"The variance node"},{"location":"nodes/statistics/variance.html#example","text":"|variance() .field('temperature')","title":"Example"},{"location":"nodes/statistics/variance.html#parameters","text":"all statistics nodes have the following parameters Parameter Description Default field( string ) name of the field used for computation as( string ) name for the field for output values defaults to the name of the stats-node","title":"Parameters"}]}